{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":114528256},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.8"}},"trust":true,"type":"settings"}
{"cell_type":"code","collapsed":true,"exec_count":22,"id":"eee3f5","input":"pvt_dict","output":{"0":{"more_output":true}},"pos":24,"scrolled":true,"type":"cell"}
{"cell_type":"code","end":1562766671685,"exec_count":2,"id":"268072","input":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom itertools import compress\n\nimport datetime\nfrom dateutil.parser import parse\n\nimport math\nimport os\nimport copy\nimport pickle\n\n#import drugLookup","kernel":"python3","pos":0,"start":1562766670489,"state":"done","type":"cell"}
{"cell_type":"code","end":1562766671722,"exec_count":3,"id":"dcc332","input":"# Read in data (from pickle file)\nfile = open('drug_df.dms','rb')\ndata = pickle.load(file)","kernel":"python3","pos":1,"start":1562766671696,"state":"done","type":"cell"}
{"cell_type":"code","end":1562766671750,"exec_count":4,"id":"4d7494","input":"data = data.sort_values(by=['dates'])","kernel":"python3","pos":2,"start":1562766671731,"state":"done","type":"cell"}
{"cell_type":"code","end":1562766731008,"exec_count":10,"id":"c9485c","input":"data.iloc[32000:32010,:]","kernel":"python3","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>transaction_id</th>\n      <th>vendor_id</th>\n      <th>vendor_name</th>\n      <th>bitcoin</th>\n      <th>USD</th>\n      <th>product_description</th>\n      <th>dates</th>\n      <th>drug_prediction</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>82024</th>\n      <td>'83122</td>\n      <td>1466</td>\n      <td>deepbay</td>\n      <td>0</td>\n      <td>4.108</td>\n      <td>Xanax (Alprazolam) 2mg</td>\n      <td>2019-01-07 20:07:30</td>\n      <td>benzodiazepines</td>\n    </tr>\n    <tr>\n      <th>82608</th>\n      <td>'83706</td>\n      <td>880</td>\n      <td>MeltDown</td>\n      <td>0.037</td>\n      <td>151.81</td>\n      <td>1g Imported Crystal Meth superlab shards are here</td>\n      <td>2019-01-07 20:19:16</td>\n      <td>methamphetamine</td>\n    </tr>\n    <tr>\n      <th>83172</th>\n      <td>'84270</td>\n      <td>123</td>\n      <td>DDUK-NDD</td>\n      <td>0.01265</td>\n      <td>51.9</td>\n      <td>100x 2mg Pfizer Xanax Tablets ? FREE NDD</td>\n      <td>2019-01-07 20:23:57</td>\n      <td>benzodiazepines</td>\n    </tr>\n    <tr>\n      <th>83174</th>\n      <td>'84272</td>\n      <td>123</td>\n      <td>DDUK-NDD</td>\n      <td>0.01265</td>\n      <td>51.9</td>\n      <td>100x 2mg Pfizer Xanax Tablets ? FREE NDD</td>\n      <td>2019-01-07 20:23:57</td>\n      <td>benzodiazepines</td>\n    </tr>\n    <tr>\n      <th>83487</th>\n      <td>'84585</td>\n      <td>1900</td>\n      <td>dankcity</td>\n      <td>0</td>\n      <td>26</td>\n      <td>100mg Etizolam USA Domestic -</td>\n      <td>2019-01-07 20:29:29</td>\n      <td>benzodiazepines</td>\n    </tr>\n    <tr>\n      <th>83478</th>\n      <td>'84576</td>\n      <td>1900</td>\n      <td>dankcity</td>\n      <td>0</td>\n      <td>26</td>\n      <td>100mg Etizolam USA Domestic -</td>\n      <td>2019-01-07 20:29:29</td>\n      <td>benzodiazepines</td>\n    </tr>\n    <tr>\n      <th>83844</th>\n      <td>'84942</td>\n      <td>1445</td>\n      <td>Cocaineandbrandy</td>\n      <td>0.13</td>\n      <td>533.37</td>\n      <td>7 GRAMS ** !!! 2018 FISH SCALE COCAINE !!! ***...</td>\n      <td>2019-01-07 20:33:57</td>\n      <td>cocaine</td>\n    </tr>\n    <tr>\n      <th>101700</th>\n      <td>'102798</td>\n      <td>1504</td>\n      <td>MoonBanana</td>\n      <td>0.0076</td>\n      <td>31.18</td>\n      <td>1g High Purity Long Shard Ketamine - FREE UK S...</td>\n      <td>2019-01-07 20:38:51</td>\n      <td>ketamine</td>\n    </tr>\n    <tr>\n      <th>101734</th>\n      <td>'102832</td>\n      <td>1504</td>\n      <td>MoonBanana</td>\n      <td>0.0076</td>\n      <td>31.18</td>\n      <td>1g High Purity Long Shard Ketamine - FREE UK S...</td>\n      <td>2019-01-07 20:38:51</td>\n      <td>ketamine</td>\n    </tr>\n    <tr>\n      <th>101706</th>\n      <td>'102804</td>\n      <td>1504</td>\n      <td>MoonBanana</td>\n      <td>0.0076</td>\n      <td>31.18</td>\n      <td>1g High Purity Long Shard Ketamine - FREE UK S...</td>\n      <td>2019-01-07 20:38:51</td>\n      <td>ketamine</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"       transaction_id  vendor_id       vendor_name  bitcoin     USD  \\\n82024          '83122       1466           deepbay        0   4.108   \n82608          '83706        880          MeltDown    0.037  151.81   \n83172          '84270        123          DDUK-NDD  0.01265    51.9   \n83174          '84272        123          DDUK-NDD  0.01265    51.9   \n83487          '84585       1900          dankcity        0      26   \n83478          '84576       1900          dankcity        0      26   \n83844          '84942       1445  Cocaineandbrandy     0.13  533.37   \n101700        '102798       1504        MoonBanana   0.0076   31.18   \n101734        '102832       1504        MoonBanana   0.0076   31.18   \n101706        '102804       1504        MoonBanana   0.0076   31.18   \n\n                                      product_description               dates  \\\n82024                              Xanax (Alprazolam) 2mg 2019-01-07 20:07:30   \n82608   1g Imported Crystal Meth superlab shards are here 2019-01-07 20:19:16   \n83172            100x 2mg Pfizer Xanax Tablets ? FREE NDD 2019-01-07 20:23:57   \n83174            100x 2mg Pfizer Xanax Tablets ? FREE NDD 2019-01-07 20:23:57   \n83487                       100mg Etizolam USA Domestic - 2019-01-07 20:29:29   \n83478                       100mg Etizolam USA Domestic - 2019-01-07 20:29:29   \n83844   7 GRAMS ** !!! 2018 FISH SCALE COCAINE !!! ***... 2019-01-07 20:33:57   \n101700  1g High Purity Long Shard Ketamine - FREE UK S... 2019-01-07 20:38:51   \n101734  1g High Purity Long Shard Ketamine - FREE UK S... 2019-01-07 20:38:51   \n101706  1g High Purity Long Shard Ketamine - FREE UK S... 2019-01-07 20:38:51   \n\n        drug_prediction  \n82024   benzodiazepines  \n82608   methamphetamine  \n83172   benzodiazepines  \n83174   benzodiazepines  \n83487   benzodiazepines  \n83478   benzodiazepines  \n83844           cocaine  \n101700         ketamine  \n101734         ketamine  \n101706         ketamine  "},"exec_count":10}},"pos":3,"scrolled":true,"start":1562766730991,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":14,"id":"62677c","input":"# Get list of vendors\n_ , vendor_list = pd.factorize(v_train, sort = True)\n\n#Create inverse emission probability dataframe\npvp = pd.DataFrame(columns = vendor_list)\n#Insert vendor name column\npvp.insert(0, \"price_bin\", list_of_intervals)\n# Apply function to dataframe\npvp.iloc[:,1:] = pvp['price_bin'].apply(getVendorsForPrice)\n# Sort by Vendor name and fill NA values with 0\npvp = pvp.fillna(0)\n# Set index to be time\npvp = pvp.set_index('price_bin')","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"d0e462","input":"# Get prior probabilities (i.e., probability of each vendor)\nvendor_probs = train_set['vendor_name'].value_counts()/np.sum(train_set['vendor_name'].value_counts())\nvendor_probs = vendor_probs.sort_index()","pos":21,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"0d8156","input":"# Create dictionary with best prediction for each drug\npvt_dict = {price_bin : list(pvp.loc[price_bin].sort_values(ascending = False)[:10].index) for price_bin in pvp.index}","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"e15611","input":"# Function to predict class for each drug in test set\ndef bayesPredict(obs_seq):\n    preds = [pvt_dict[obs] for obs in obs_seq]\n    return(preds)\n\n# Get times for testing\ntest_set['price_category'] = test_set['USD'].apply(binPrice, start_prices = list_of_intervals)\nt_test = list(test_set['price_category'])\n\n# Make predictions\ntest_set['vendor_pred'] = bayesPredict(t_test)","output":{"0":{"name":"stderr","output_type":"stream","text":"/usr/local/lib/python3.6/dist-packages/ipykernel/__main__.py:7: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n/usr/local/lib/python3.6/dist-packages/ipykernel/__main__.py:11: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"81f6ea","input":"# Compute 'top n' accuracy\ndef get_top_n(df, n):\n    q = zip(df['vendor_name'], df['vendor_pred'])\n    if n == 1:\n        ar = [samp[0] == samp[1][0] for samp in q]\n    else:\n        ar = [samp[0] in samp[1][:n] for samp in q]\n    acc = np.sum(ar)/len(ar)\n    return(round(acc,4))","pos":25,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"b0350f","input":"print('Time interval for bin:',interval, 'dollar.')\nprint('Top 1 accuracy :',get_top_n(test_set, 1))\nprint('Top 2 accuracy :',get_top_n(test_set, 2))\nprint('Top 3 accuracy :',get_top_n(test_set, 3))\nprint('Top 5 accuracy :',get_top_n(test_set, 5))\nprint('Top 10 accuracy:',get_top_n(test_set, 10))","output":{"0":{"name":"stdout","output_type":"stream","text":"Time interval for bin: 20 dollar.\nTop 1 accuracy : 0.0723\nTop 2 accuracy : 0.1083\nTop 3 accuracy : 0.1495\nTop 5 accuracy : 0.1923\nTop 10 accuracy: 0.2843\n"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"4e2d40","input":"# Price plots\nplot_price = data[['vendor_name', 'USD']].copy()\n\nvendor_names = data['vendor_name'].tolist()\n\nUSD = data['USD'].tolist()\n\n# price_graphs = pd.DataFrame({'vendor_name': vendor_names, 'USD': USD})\n\n# price_graphs.groupby('vendor_name').hist()\n# print (data['USD'].hist(by=data['vendor_name']))\n\n\n","pos":31,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"5875f0","input":"# Get total number of samples, and number of train/test samples\nn_samples = data.shape[0]\nn_train = round(n_samples * .75)\n\n# Create training/test set\ncopied_data = data.copy()\n\n# Convert USD column from objects to integers\n# copied_data['USD']= pd.to_numeric\ncopied_data[[\"USD\"]] = copied_data[[\"USD\"]].apply(pd.to_numeric)\n\n\n#Create training and testing set\ntrain_set = copied_data.iloc[:n_train,:]\ntest_set = copied_data.iloc[n_train:,:]","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"16418a","input":"copied_data.dtypes","output":{"0":{"data":{"text/plain":"transaction_id                 object\nvendor_id                       int64\nvendor_name                    object\nbitcoin                        object\nUSD                           float64\nproduct_description            object\ndates                  datetime64[ns]\ndrug_prediction                object\ndtype: object"},"exec_count":28,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"036858","input":"#Split testing and training set\np_train = list(train_set['USD'])\nv_train = list(train_set['vendor_name'])\n\np_test = list(test_set['USD'])\nv_test = list(test_set['vendor_name'])","pos":7,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"3afb1a","input":"start = 0.00 # first interval price\ninterval = 20 # length of interval (dollars)\n\n# Create list of price intervals\nn_intervals = int(13000/interval) # compute number of intervals\nlist_of_intervals = [i for i in range(n_intervals)]\nslide_amount = interval # amount to slide window (if no overlap desired, set equal to interval)\n\n#Generate the list of bins/intervals\nfor index in list_of_intervals:\n    if list_of_intervals[index] == 0:\n        list_of_intervals[index] = 0\n    else:\n        list_of_intervals[index] = slide_amount\n        slide_amount += interval\n\n# print (list_of_intervals)\n\nlist_of_intervals= [float(i) for i in list_of_intervals]\n\nprint (list_of_intervals)","output":{"0":{"name":"stdout","output_type":"stream","text":"[0.0, 20.0, 40.0, 60.0, 80.0, 100.0, 120.0, 140.0, 160.0, 180.0, 200.0, 220.0, 240.0, 260.0, 280.0, 300.0, 320.0, 340.0, 360.0, 380.0, 400.0, 420.0, 440.0, 460.0, 480.0, 500.0, 520.0, 540.0, 560.0, 580.0, 600.0, 620.0, 640.0, 660.0, 680.0, 700.0, 720.0, 740.0, 760.0, 780.0, 800.0, 820.0, 840.0, 860.0, 880.0, 900.0, 920.0, 940.0, 960.0, 980.0, 1000.0, 1020.0, 1040.0, 1060.0, 1080.0, 1100.0, 1120.0, 1140.0, 1160.0, 1180.0, 1200.0, 1220.0, 1240.0, 1260.0, 1280.0, 1300.0, 1320.0, 1340.0, 1360.0, 1380.0, 1400.0, 1420.0, 1440.0, 1460.0, 1480.0, 1500.0, 1520.0, 1540.0, 1560.0, 1580.0, 1600.0, 1620.0, 1640.0, 1660.0, 1680.0, 1700.0, 1720.0, 1740.0, 1760.0, 1780.0, 1800.0, 1820.0, 1840.0, 1860.0, 1880.0, 1900.0, 1920.0, 1940.0, 1960.0, 1980.0, 2000.0, 2020.0, 2040.0, 2060.0, 2080.0, 2100.0, 2120.0, 2140.0, 2160.0, 2180.0, 2200.0, 2220.0, 2240.0, 2260.0, 2280.0, 2300.0, 2320.0, 2340.0, 2360.0, 2380.0, 2400.0, 2420.0, 2440.0, 2460.0, 2480.0, 2500.0, 2520.0, 2540.0, 2560.0, 2580.0, 2600.0, 2620.0, 2640.0, 2660.0, 2680.0, 2700.0, 2720.0, 2740.0, 2760.0, 2780.0, 2800.0, 2820.0, 2840.0, 2860.0, 2880.0, 2900.0, 2920.0, 2940.0, 2960.0, 2980.0, 3000.0, 3020.0, 3040.0, 3060.0, 3080.0, 3100.0, 3120.0, 3140.0, 3160.0, 3180.0, 3200.0, 3220.0, 3240.0, 3260.0, 3280.0, 3300.0, 3320.0, 3340.0, 3360.0, 3380.0, 3400.0, 3420.0, 3440.0, 3460.0, 3480.0, 3500.0, 3520.0, 3540.0, 3560.0, 3580.0, 3600.0, 3620.0, 3640.0, 3660.0, 3680.0, 3700.0, 3720.0, 3740.0, 3760.0, 3780.0, 3800.0, 3820.0, 3840.0, 3860.0, 3880.0, 3900.0, 3920.0, 3940.0, 3960.0, 3980.0, 4000.0, 4020.0, 4040.0, 4060.0, 4080.0, 4100.0, 4120.0, 4140.0, 4160.0, 4180.0, 4200.0, 4220.0, 4240.0, 4260.0, 4280.0, 4300.0, 4320.0, 4340.0, 4360.0, 4380.0, 4400.0, 4420.0, 4440.0, 4460.0, 4480.0, 4500.0, 4520.0, 4540.0, 4560.0, 4580.0, 4600.0, 4620.0, 4640.0, 4660.0, 4680.0, 4700.0, 4720.0, 4740.0, 4760.0, 4780.0, 4800.0, 4820.0, 4840.0, 4860.0, 4880.0, 4900.0, 4920.0, 4940.0, 4960.0, 4980.0, 5000.0, 5020.0, 5040.0, 5060.0, 5080.0, 5100.0, 5120.0, 5140.0, 5160.0, 5180.0, 5200.0, 5220.0, 5240.0, 5260.0, 5280.0, 5300.0, 5320.0, 5340.0, 5360.0, 5380.0, 5400.0, 5420.0, 5440.0, 5460.0, 5480.0, 5500.0, 5520.0, 5540.0, 5560.0, 5580.0, 5600.0, 5620.0, 5640.0, 5660.0, 5680.0, 5700.0, 5720.0, 5740.0, 5760.0, 5780.0, 5800.0, 5820.0, 5840.0, 5860.0, 5880.0, 5900.0, 5920.0, 5940.0, 5960.0, 5980.0, 6000.0, 6020.0, 6040.0, 6060.0, 6080.0, 6100.0, 6120.0, 6140.0, 6160.0, 6180.0, 6200.0, 6220.0, 6240.0, 6260.0, 6280.0, 6300.0, 6320.0, 6340.0, 6360.0, 6380.0, 6400.0, 6420.0, 6440.0, 6460.0, 6480.0, 6500.0, 6520.0, 6540.0, 6560.0, 6580.0, 6600.0, 6620.0, 6640.0, 6660.0, 6680.0, 6700.0, 6720.0, 6740.0, 6760.0, 6780.0, 6800.0, 6820.0, 6840.0, 6860.0, 6880.0, 6900.0, 6920.0, 6940.0, 6960.0, 6980.0, 7000.0, 7020.0, 7040.0, 7060.0, 7080.0, 7100.0, 7120.0, 7140.0, 7160.0, 7180.0, 7200.0, 7220.0, 7240.0, 7260.0, 7280.0, 7300.0, 7320.0, 7340.0, 7360.0, 7380.0, 7400.0, 7420.0, 7440.0, 7460.0, 7480.0, 7500.0, 7520.0, 7540.0, 7560.0, 7580.0, 7600.0, 7620.0, 7640.0, 7660.0, 7680.0, 7700.0, 7720.0, 7740.0, 7760.0, 7780.0, 7800.0, 7820.0, 7840.0, 7860.0, 7880.0, 7900.0, 7920.0, 7940.0, 7960.0, 7980.0, 8000.0, 8020.0, 8040.0, 8060.0, 8080.0, 8100.0, 8120.0, 8140.0, 8160.0, 8180.0, 8200.0, 8220.0, 8240.0, 8260.0, 8280.0, 8300.0, 8320.0, 8340.0, 8360.0, 8380.0, 8400.0, 8420.0, 8440.0, 8460.0, 8480.0, 8500.0, 8520.0, 8540.0, 8560.0, 8580.0, 8600.0, 8620.0, 8640.0, 8660.0, 8680.0, 8700.0, 8720.0, 8740.0, 8760.0, 8780.0, 8800.0, 8820.0, 8840.0, 8860.0, 8880.0, 8900.0, 8920.0, 8940.0, 8960.0, 8980.0, 9000.0, 9020.0, 9040.0, 9060.0, 9080.0, 9100.0, 9120.0, 9140.0, 9160.0, 9180.0, 9200.0, 9220.0, 9240.0, 9260.0, 9280.0, 9300.0, 9320.0, 9340.0, 9360.0, 9380.0, 9400.0, 9420.0, 9440.0, 9460.0, 9480.0, 9500.0, 9520.0, 9540.0, 9560.0, 9580.0, 9600.0, 9620.0, 9640.0, 9660.0, 9680.0, 9700.0, 9720.0, 9740.0, 9760.0, 9780.0, 9800.0, 9820.0, 9840.0, 9860.0, 9880.0, 9900.0, 9920.0, 9940.0, 9960.0, 9980.0, 10000.0, 10020.0, 10040.0, 10060.0, 10080.0, 10100.0, 10120.0, 10140.0, 10160.0, 10180.0, 10200.0, 10220.0, 10240.0, 10260.0, 10280.0, 10300.0, 10320.0, 10340.0, 10360.0, 10380.0, 10400.0, 10420.0, 10440.0, 10460.0, 10480.0, 10500.0, 10520.0, 10540.0, 10560.0, 10580.0, 10600.0, 10620.0, 10640.0, 10660.0, 10680.0, 10700.0, 10720.0, 10740.0, 10760.0, 10780.0, 10800.0, 10820.0, 10840.0, 10860.0, 10880.0, 10900.0, 10920.0, 10940.0, 10960.0, 10980.0, 11000.0, 11020.0, 11040.0, 11060.0, 11080.0, 11100.0, 11120.0, 11140.0, 11160.0, 11180.0, 11200.0, 11220.0, 11240.0, 11260.0, 11280.0, 11300.0, 11320.0, 11340.0, 11360.0, 11380.0, 11400.0, 11420.0, 11440.0, 11460.0, 11480.0, 11500.0, 11520.0, 11540.0, 11560.0, 11580.0, 11600.0, 11620.0, 11640.0, 11660.0, 11680.0, 11700.0, 11720.0, 11740.0, 11760.0, 11780.0, 11800.0, 11820.0, 11840.0, 11860.0, 11880.0, 11900.0, 11920.0, 11940.0, 11960.0, 11980.0, 12000.0, 12020.0, 12040.0, 12060.0, 12080.0, 12100.0, 12120.0, 12140.0, 12160.0, 12180.0, 12200.0, 12220.0, 12240.0, 12260.0, 12280.0, 12300.0, 12320.0, 12340.0, 12360.0, 12380.0, 12400.0, 12420.0, 12440.0, 12460.0, 12480.0, 12500.0, 12520.0, 12540.0, 12560.0, 12580.0, 12600.0, 12620.0, 12640.0, 12660.0, 12680.0, 12700.0, 12720.0, 12740.0, 12760.0, 12780.0, 12800.0, 12820.0, 12840.0, 12860.0, 12880.0, 12900.0, 12920.0, 12940.0, 12960.0, 12980.0]\n"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"619ee1","input":"#  Function to check if price is in interval\ndef priceInInterval(start_price, check_price, length):\n    end_price = start_price + length\n    cond1 = check_price >= start_price\n    cond2 = check_price < end_price\n    return(cond1 and cond2)\n\n# Function to classify given price into one of bins\ndef binPrice(price1, start_prices, length = interval):\n    price_bin = [start_price for start_price in start_prices if priceInInterval(start_price, price1,length)]\n    if len(price_bin) == 0:\n        return(start_prices[-1])\n    else:\n        return(price_bin[0])","pos":12,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"784172","input":"# train_set.dtypes","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"66cd17","input":"# For given vendor, count the number of transactions in each time_bin\ntrain_set['price_category'] = train_set['USD'].apply(binPrice, start_prices = list_of_intervals)","output":{"0":{"name":"stderr","output_type":"stream","text":"/usr/local/lib/python3.6/dist-packages/ipykernel/__main__.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  from ipykernel import kernelapp as app\n"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"26903c","input":"train_set.head(6)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>transaction_id</th>\n      <th>vendor_id</th>\n      <th>vendor_name</th>\n      <th>bitcoin</th>\n      <th>USD</th>\n      <th>product_description</th>\n      <th>dates</th>\n      <th>drug_prediction</th>\n      <th>price_category</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>10946</th>\n      <td>'12044</td>\n      <td>754</td>\n      <td>hiddenhands</td>\n      <td>0</td>\n      <td>72.532</td>\n      <td>KETAMINE 3G AAA+++ | OFFER | Next Day Delivery</td>\n      <td>2018-04-03 19:14:02</td>\n      <td>ketamine</td>\n      <td>60.0</td>\n    </tr>\n    <tr>\n      <th>10911</th>\n      <td>'12009</td>\n      <td>754</td>\n      <td>hiddenhands</td>\n      <td>0</td>\n      <td>72.532</td>\n      <td>KETAMINE 3G AAA+++ | OFFER | Next Day Delivery</td>\n      <td>2018-04-03 19:14:02</td>\n      <td>ketamine</td>\n      <td>60.0</td>\n    </tr>\n    <tr>\n      <th>15416</th>\n      <td>'16514</td>\n      <td>438</td>\n      <td>drugpharmacist</td>\n      <td>0</td>\n      <td>145.600</td>\n      <td>Bomb Cartel Ice 7g - FREE PRIORITY SHIPPING</td>\n      <td>2018-04-03 22:19:03</td>\n      <td>methamphetamine</td>\n      <td>140.0</td>\n    </tr>\n    <tr>\n      <th>21600</th>\n      <td>'22698</td>\n      <td>962</td>\n      <td>trotters_stash</td>\n      <td>0</td>\n      <td>382.446</td>\n      <td>7g High Quality Pure #3 Heroin - Uncut</td>\n      <td>2018-04-04 02:00:13</td>\n      <td>heroin</td>\n      <td>380.0</td>\n    </tr>\n    <tr>\n      <th>10955</th>\n      <td>'12053</td>\n      <td>754</td>\n      <td>hiddenhands</td>\n      <td>0</td>\n      <td>72.532</td>\n      <td>KETAMINE 3G AAA+++ | OFFER | Next Day Delivery</td>\n      <td>2018-04-04 19:14:02</td>\n      <td>ketamine</td>\n      <td>60.0</td>\n    </tr>\n    <tr>\n      <th>10947</th>\n      <td>'12045</td>\n      <td>754</td>\n      <td>hiddenhands</td>\n      <td>0</td>\n      <td>72.532</td>\n      <td>KETAMINE 3G AAA+++ | OFFER | Next Day Delivery</td>\n      <td>2018-04-04 19:14:02</td>\n      <td>ketamine</td>\n      <td>60.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      transaction_id  vendor_id     vendor_name bitcoin      USD  \\\n10946         '12044        754     hiddenhands       0   72.532   \n10911         '12009        754     hiddenhands       0   72.532   \n15416         '16514        438  drugpharmacist       0  145.600   \n21600         '22698        962  trotters_stash       0  382.446   \n10955         '12053        754     hiddenhands       0   72.532   \n10947         '12045        754     hiddenhands       0   72.532   \n\n                                  product_description               dates  \\\n10946  KETAMINE 3G AAA+++ | OFFER | Next Day Delivery 2018-04-03 19:14:02   \n10911  KETAMINE 3G AAA+++ | OFFER | Next Day Delivery 2018-04-03 19:14:02   \n15416     Bomb Cartel Ice 7g - FREE PRIORITY SHIPPING 2018-04-03 22:19:03   \n21600          7g High Quality Pure #3 Heroin - Uncut 2018-04-04 02:00:13   \n10955  KETAMINE 3G AAA+++ | OFFER | Next Day Delivery 2018-04-04 19:14:02   \n10947  KETAMINE 3G AAA+++ | OFFER | Next Day Delivery 2018-04-04 19:14:02   \n\n       drug_prediction  price_category  \n10946         ketamine            60.0  \n10911         ketamine            60.0  \n15416  methamphetamine           140.0  \n21600           heroin           380.0  \n10955         ketamine            60.0  \n10947         ketamine            60.0  "},"exec_count":34,"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"c63e54","input":"# Get probability for each vendor given a specific time\ndef getVendorsForPrice(price_bin):\n#     Args: Name of a vendor (string)\n#     Returns: series, representing proportion of total for each drug\n    price_subset = train_set[train_set['price_category'] == price_bin]\n    tally = price_subset['vendor_name'].groupby(price_subset['vendor_name']).count()\n    return(tally/np.sum(tally))","pos":18,"type":"cell"}
{"cell_type":"code","exec_count":84,"id":"3dfe52","input":"#concatenate training and testing set\ndrug_and_price = pd.concat([train_set, test_set],sort = False)\n","pos":28,"type":"cell"}
{"cell_type":"code","exec_count":85,"id":"8de55b","input":"# Export to file\nimport pickle\nfile = open('drug_and_price.pkl','wb')\npickle.dump(drug_and_price, file)\nfile.close()\n\nfile = open('drug_and_price_train.pkl','wb')\npickle.dump(train_set, file)\nfile.close()\n\nfile = open('drug_and_price_test.pkl','wb')\npickle.dump(test_set, file)\nfile.close()","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"095bdb","input":"#### Export data to pickle file","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"22c019","input":"#### Create functions to put price value in categories","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"234d07","input":"#### Price plots","pos":30,"type":"cell"}
{"cell_type":"markdown","id":"249c97","input":"#### Generate list of bins/categories","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"3f5bdf","input":"## Split dataset into train/test set\n","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"99037b","input":"#### Make Bayes Prediction","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"a1f57a","input":"#### Categorize each price value for each listing","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"bb9382","input":"#### Compute probability of vendor given price","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"be0726","input":"## Compute P( p | v )","pos":8,"type":"cell"}
{"id":0,"time":1562766560448,"type":"user"}
{"last_load":1562766561808,"type":"file"}