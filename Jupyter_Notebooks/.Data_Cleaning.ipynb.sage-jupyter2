{"backend_state":"ready","kernel":"python3","metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.8"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"1a0a24","input":"","pos":53,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":1,"id":"5be819","input":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom itertools import compress\n\nfrom datetime import datetime\nfrom dateutil.parser import parse\n\nimport math\nimport os\nimport copy","pos":1,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":10,"id":"a0faea","input":"import spacy\nfrom spacy.lang.en import English\nparser = English()","pos":13,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":11,"id":"f43f3b","input":"# Function to tokenize titles\ndef tokenize_1(title):\n    tokens = parser(title.lower())\n    tokens = [token.orth_ for token in tokens if not token.orth_.isspace()]\n    return(tokens)","pos":14,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":12,"id":"6e08ab","input":"tokenize_1('25gr*MDMA')","output":{"0":{"data":{"text/plain":"['25gr*mdma']"},"exec_count":12,"output_type":"execute_result"}},"pos":15,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":13,"id":"7cae4c","input":"# Apply tokenizer to the titles in the dataframe\nproduct_descriptions['tokenized_titles'] = product_descriptions.iloc[:,15].apply(tokenize_1)","pos":16,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":14,"id":"49bc6c","input":"# Alternative tokenizer\nspecial_char =['`','\\'','=','-','~','!','@','#','$','^','&','*','(',')','_','+','[',']','{','}',';','\\\\',':','|','<','<','>','?','//']\n\ndef remove_special_char(string):\n    for char in special_char:\n        string = string.replace(char,' ')\n    return(string)\n\ndef tokenize(string):\n    return remove_special_char(string).split()","pos":17,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":15,"id":"1746b9","input":"import drugLookup","pos":19,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":16,"id":"c988a1","input":"# Load drugs dictionary\ndrugs_dict = drugLookup.get_drugs_dict()\n\ncomplete_multi_word_list = []\n\ndrug_index = 0\n#For loop that gets all the synonyms of drugs with more than one word\nfor drug in drugs_dict.keys():\n    slang_words = drugs_dict[drug]\n    multi_word_list = []\n    for slang_word in slang_words:\n        if ' ' in slang_word:\n            multi_word_list.append(slang_word)\n    complete_multi_word_list.append(multi_word_list)","pos":21,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":17,"id":"1cde5a","input":"# Create multi_word dictionary\ndrug_cats = list(drugs_dict.keys())\nmulti_drug_dict = dict(zip(drug_cats, complete_multi_word_list))","pos":22,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":18,"id":"216639","input":"# multi_drug_dict","pos":23,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":19,"id":"4bbac1","input":"# Load dictionary of drugs\ndrugs_dict = drugLookup.get_drugs_dict()\n\n\n# Get list of possible drugs for each listing\ndef categorize_listing(title_set):\n    #     Function takes in set of two: first entry is raw_title, second is tokenized_title\n    possible_drugs = []\n    list_title_set = list(title_set)\n    raw_title = list_title_set[0]\n    tokenized_title = list_title_set[1]\n    for drug in drugs_dict.keys():\n        if any(token in drugs_dict[drug] for token in tokenized_title):  # uses tokenization\n            possible_drugs.append(drug)\n            break\n        if any(multi_word in raw_title.lower() for multi_word in multi_drug_dict[drug]):\n            possible_drugs.append(drug)\n            break\n    return possible_drugs","pos":24,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":2,"id":"b67122","input":"# Reading the text file\nproduct_descriptions = pd.read_csv('product_rating_modified (1).txt', header = None, sep = '\\', \\'', engine = 'python')","pos":2,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":20,"id":"1de1de","input":"# Categorize each listing\nproduct_descriptions['drug_prediction'] = product_descriptions.iloc[:,[15,17]].apply(categorize_listing, axis = 1)","pos":25,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":21,"id":"291337","input":"product_descriptions['drug_prediction']","output":{"0":{"data":{"text/plain":"9430               [heroin]\n9431               [heroin]\n9432            [not_drugs]\n9433            [not_drugs]\n9434      [benzodiazepines]\n9435      [benzodiazepines]\n9436      [benzodiazepines]\n9437      [benzodiazepines]\n9438      [benzodiazepines]\n9439      [benzodiazepines]\n9440      [benzodiazepines]\n9441      [benzodiazepines]\n9442      [benzodiazepines]\n9443      [benzodiazepines]\n9444      [benzodiazepines]\n9445      [benzodiazepines]\n9446      [benzodiazepines]\n9447      [benzodiazepines]\n9448      [benzodiazepines]\n9449      [benzodiazepines]\n9450      [benzodiazepines]\n9451      [benzodiazepines]\n9452      [benzodiazepines]\n9453            [marijuana]\n9454            [marijuana]\n9455            [marijuana]\n9456            [marijuana]\n9457              [hashish]\n9458              [hashish]\n9459              [hashish]\n                ...        \n119854    [methamphetamine]\n119855    [methamphetamine]\n119856    [methamphetamine]\n119857    [methamphetamine]\n119858    [methamphetamine]\n119859    [methamphetamine]\n119860    [methamphetamine]\n119861    [methamphetamine]\n119862    [methamphetamine]\n119863    [methamphetamine]\n119864    [methamphetamine]\n119865    [methamphetamine]\n119866    [methamphetamine]\n119867    [methamphetamine]\n119868    [methamphetamine]\n119869          [marijuana]\n119870          [marijuana]\n119871    [methamphetamine]\n119872    [methamphetamine]\n119873    [methamphetamine]\n119874    [methamphetamine]\n119875    [methamphetamine]\n119876    [methamphetamine]\n119877    [methamphetamine]\n119878    [methamphetamine]\n119879    [methamphetamine]\n119880    [methamphetamine]\n119881    [methamphetamine]\n119882    [methamphetamine]\n119883    [methamphetamine]\nName: drug_prediction, Length: 92388, dtype: object"},"exec_count":21,"output_type":"execute_result"}},"pos":26,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":22,"id":"98d3ff","input":"# Look at distribution of dates\nproduct_descriptions['dates'].groupby(product_descriptions[\"dates\"].dt.year).count().plot(kind='bar')\nplt.show()\nproduct_descriptions['dates'].groupby(product_descriptions[\"dates\"].dt.year).count()","output":{"0":{"data":{"image/png":"06f7b5ae7041d7ab886f9c1951a00f4c16c0acdc","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":22,"metadata":{"image/png":{"height":279,"width":390}},"output_type":"execute_result"},"1":{"data":{"text/plain":"dates\n1969     2457\n1970        2\n2017       25\n2018    84014\n2019     5890\nName: dates, dtype: int64"},"exec_count":22,"output_type":"execute_result"}},"pos":28,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":23,"id":"5cfcfa","input":"# Plot the 2019 dates\nafter_2019 = product_descriptions['dates'] > datetime(2019,1,1)\nafter_2019_df = product_descriptions[after_2019]\nafter_2019_df['dates'].groupby(after_2019_df[\"dates\"].dt.month).count().plot(kind='bar')\nplt.show()\n\nafter_2019_df['dates'].groupby(after_2019_df[\"dates\"].dt.month).count()\n\n#after_2019","output":{"0":{"data":{"image/png":"0b084c0dad9d84c6eb1286ecce9679e6b871822f","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":23,"metadata":{"image/png":{"height":260,"width":383}},"output_type":"execute_result"},"1":{"data":{"text/plain":"dates\n1    5890\nName: dates, dtype: int64"},"exec_count":23,"output_type":"execute_result"}},"pos":29,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":24,"id":"b988cf","input":"# Plot the 2017 dates\nbefore_2018 = product_descriptions['dates'] < datetime(2018,1,1)\nafter_2016 = product_descriptions['dates'] > datetime(2016,12,31)\nin_2017_df = product_descriptions[after_2016 & before_2018]\nin_2017_df['dates'].groupby(in_2017_df[\"dates\"].dt.month).count().plot(kind='bar')\nplt.ylabel('Number of Listings')\nplt.xlabel('Month')\nplt.show()","output":{"0":{"data":{"image/png":"1312564ff003edae2ee065c3282c2a9e96db19fa","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":24,"metadata":{"image/png":{"height":266,"width":384}},"output_type":"execute_result"}},"pos":30,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":25,"id":"9e39ef","input":"# Filter out the 1969/1970/2019 dates\n# good_dates = product_desci\nbefore_2019 = product_descriptions['dates'] < datetime(2019,2,1)\nafter_2017 = product_descriptions['dates'] > datetime(2018,4,1)\ndf = product_descriptions[before_2019 & after_2017]","pos":31,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":26,"id":"4ee037","input":"# Plot 2018 dates\ndf['dates'].groupby(df[\"dates\"].dt.month).count().plot(kind='bar')\nplt.show()\n\nmonthly_listings = df['dates'].groupby(df[\"dates\"].dt.month).count()\ntotal_listings = sum(df['dates'].groupby(df[\"dates\"].dt.month).count())\n\nprint(monthly_listings)\ntotal_listings\n#percentage_of_listings = ","output":{"0":{"data":{"image/png":"ece7b5af82c23af6f339e3b8eb6c55bad3d98124","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":26,"metadata":{"image/png":{"height":266,"width":390}},"output_type":"execute_result"},"1":{"name":"stdout","output_type":"stream","text":"dates\n1      5890\n4      2103\n5      4164\n6      4316\n7      4786\n8      8382\n9      9607\n10    13225\n11    16497\n12    20872\nName: dates, dtype: int64\n"},"2":{"data":{"text/plain":"89842"},"exec_count":26,"output_type":"execute_result"}},"pos":32,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":27,"id":"6389ca","input":"df.shape","output":{"0":{"data":{"text/plain":"(89842, 19)"},"exec_count":27,"output_type":"execute_result"}},"pos":33,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":28,"id":"65ddc8","input":"df","output":{"0":{"name":"stderr","output_type":"stream","text":"WARNING: Some output was deleted.\n"}},"pos":34,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":29,"id":"327b25","input":"# Get subset of columns that we care about\ndrug_data = copy.deepcopy(df.iloc[:,[0,2,3,8,9,15,16,18, 5, 6, 4]])\ndrug_data.columns = ['transaction_id','vendor_id','vendor_name','bitcoin','USD',\n                     'product_description','date', 'drug_prediction', 'rating', 'feedback', 'buyer_name']","pos":36,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"b03015","input":"product_descriptions.head()\nproduct_descriptions[product_descriptions.iloc[:,3]=='Hollandfinest']","output":{"0":{"more_output":true}},"pos":3,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":30,"id":"d78480","input":"from datetime import datetime\n#bitcoin to USD file\nbtc_price = pd.read_csv('BTC-USD_20100716-20190604.csv')\nbtc_price = np.array(btc_price)\n\n#convert dates to datetime.date\nbtc_date = []\nfor number in btc_price[:,0]:\n    number_string = str(number)\n    btc_date.append(datetime.strptime(number_string, '%m/%d/%Y').date())\n#btc_date\n\npr_mkt_drg_new = np.array(drug_data)\n\npr_mkt_date = []\nfor number in pr_mkt_drg_new[:,6]:\n    number_string = str(number)\n    pr_mkt_date.append(datetime.strptime(number_string, '%Y-%m-%d %H:%M:%S').date())\n#pr_mkt_date","pos":37,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":31,"id":"7447d0","input":"#Convert bitcoin amount to USD\ndict_btc = dict(zip(btc_date, btc_price[:,1])) # store the bitcoin price as dict\n\npr_mkt_df = drug_data\n\n# match the bitcoin historical price to our date features and shift the bitcoin amount to USD\nfor i in range(len(pr_mkt_df)):\n    if pr_mkt_df.iloc[i][3] != -1.0:\n           if pr_mkt_date[i] in set(dict_btc.keys()):\n                pr_mkt_drg_new[i][4] = round(float(pr_mkt_drg_new[i][3])*(dict_btc[pr_mkt_date[i]]), 2)\n    else:\n        pr_mkt_drg_new[i][3] = 0\n\n#list of pr_mkt_drg_new when bitcoin = 0 and updated USD\n# pr_mkt_Price = []\n# for i in range(len(pr_mkt_df)):\n#     if pr_mkt_drg_new[i][3] != '-1':\n#         pr_mkt_Price.append(pr_mkt_drg_new[i][3])\n#     if pr_mkt_drg_new[i][4] != '-1':\n#         pr_mkt_Price.append(round(pr_mkt_drg_new[i][4],2))\n# print(pr_mkt_Price)\n\n\n#updated USD and bitcoin added to drug_data\npr_mkt_drg_new[:,4]\nupdated_usd = pr_mkt_drg_new[:,4]\nupdated_bitcoin = pr_mkt_drg_new[:,3]\ndrug_data['USD'] = updated_usd\ndrug_data['bitcoin'] = updated_bitcoin\ndrug_data","output":{"0":{"name":"stderr","output_type":"stream","text":"WARNING: Some output was deleted.\n"}},"pos":38,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":32,"id":"3a3671","input":"#Rounding all values in USD to two decimals\ndrug_data['USD'] = drug_data['USD'].astype(float)\ndrug_data['USD'] = drug_data['USD'].round(2)\ndrug_data","output":{"0":{"name":"stderr","output_type":"stream","text":"WARNING: Some output was deleted.\n"}},"pos":39,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":33,"id":"36280f","input":"# product_descriptions.head()","pos":41,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":34,"id":"c488a1","input":"import pickle\nfile = open('drug_data','wb')\npickle.dump(drug_data, file)\nfile.close()","pos":42,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":35,"id":"01adfb","input":"#Export as csv\ndrug_data.to_csv('sorted_listings_v12.csv')","pos":43,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":36,"id":"a40118","input":"#drug_data.product_description","pos":44,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":37,"id":"189c52","input":"drug_data.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>transaction_id</th>\n      <th>vendor_id</th>\n      <th>vendor_name</th>\n      <th>bitcoin</th>\n      <th>USD</th>\n      <th>product_description</th>\n      <th>date</th>\n      <th>drug_prediction</th>\n      <th>rating</th>\n      <th>feedback</th>\n      <th>buyer_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>9430</th>\n      <td>'10528</td>\n      <td>590</td>\n      <td>superclr</td>\n      <td>0</td>\n      <td>416.00</td>\n      <td>5 GRAMS GRADE AAA+ CARTEL TAN POWDER HEROIN</td>\n      <td>2018-11-02 06:43:01</td>\n      <td>[heroin]</td>\n      <td>5.0</td>\n      <td>Vendor did a great job 5 across the board exce...</td>\n      <td>#####</td>\n    </tr>\n    <tr>\n      <th>9431</th>\n      <td>'10529</td>\n      <td>590</td>\n      <td>superclr</td>\n      <td>0</td>\n      <td>416.00</td>\n      <td>5 GRAMS GRADE AAA+ CARTEL TAN POWDER HEROIN</td>\n      <td>2018-11-10 06:43:01</td>\n      <td>[heroin]</td>\n      <td>5.0</td>\n      <td>GREAT</td>\n      <td>#####</td>\n    </tr>\n    <tr>\n      <th>9432</th>\n      <td>'10530</td>\n      <td>1013</td>\n      <td>REAL_MEGASTORE</td>\n      <td>0</td>\n      <td>3.12</td>\n      <td>?CRAVETV.CA? PREMIUM</td>\n      <td>2018-12-27 06:43:06</td>\n      <td>[not_drugs]</td>\n      <td>5.0</td>\n      <td>Enter your comments here</td>\n      <td>#####</td>\n    </tr>\n    <tr>\n      <th>9433</th>\n      <td>'10531</td>\n      <td>1013</td>\n      <td>REAL_MEGASTORE</td>\n      <td>0</td>\n      <td>3.12</td>\n      <td>?CRAVETV.CA? PREMIUM</td>\n      <td>2018-12-27 06:43:06</td>\n      <td>[not_drugs]</td>\n      <td>5.0</td>\n      <td>Enter your comments here</td>\n      <td>#####</td>\n    </tr>\n    <tr>\n      <th>9435</th>\n      <td>'10533</td>\n      <td>92</td>\n      <td>OnionKings</td>\n      <td>0</td>\n      <td>109.12</td>\n      <td>Rivotril 2mg från apotek (Roche) [100st]</td>\n      <td>2018-12-21 06:43:11</td>\n      <td>[benzodiazepines]</td>\n      <td>5.0</td>\n      <td>Toppklass!! Snabb leverans. Allt perfekt!!!</td>\n      <td>#####</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"     transaction_id  vendor_id     vendor_name bitcoin     USD  \\\n9430         '10528        590        superclr       0  416.00   \n9431         '10529        590        superclr       0  416.00   \n9432         '10530       1013  REAL_MEGASTORE       0    3.12   \n9433         '10531       1013  REAL_MEGASTORE       0    3.12   \n9435         '10533         92      OnionKings       0  109.12   \n\n                              product_description                date  \\\n9430  5 GRAMS GRADE AAA+ CARTEL TAN POWDER HEROIN 2018-11-02 06:43:01   \n9431  5 GRAMS GRADE AAA+ CARTEL TAN POWDER HEROIN 2018-11-10 06:43:01   \n9432                         ?CRAVETV.CA? PREMIUM 2018-12-27 06:43:06   \n9433                         ?CRAVETV.CA? PREMIUM 2018-12-27 06:43:06   \n9435     Rivotril 2mg från apotek (Roche) [100st] 2018-12-21 06:43:11   \n\n        drug_prediction  rating  \\\n9430           [heroin]     5.0   \n9431           [heroin]     5.0   \n9432        [not_drugs]     5.0   \n9433        [not_drugs]     5.0   \n9435  [benzodiazepines]     5.0   \n\n                                               feedback buyer_name  \n9430  Vendor did a great job 5 across the board exce...      #####  \n9431                                              GREAT      #####  \n9432                           Enter your comments here      #####  \n9433                           Enter your comments here      #####  \n9435        Toppklass!! Snabb leverans. Allt perfekt!!!      #####  "},"exec_count":37,"output_type":"execute_result"}},"pos":45,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":38,"id":"b64019","input":"#function to convert list to string\ndef flatten(drug_prediction):\n    str1 = ''.join(drug_prediction)\n    return str1\n\n#convert predictions from list to strings\ndrug_data['drug_cats'] = drug_data.iloc[:,7].apply(flatten)","pos":46,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":39,"id":"dcaeb7","input":"uncategorized_listings = drug_data[drug_data['drug_cats'] == '']","pos":47,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"c77a58","input":"product_descriptions.groupby(1).count()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>10</th>\n      <th>11</th>\n      <th>12</th>\n      <th>13</th>\n      <th>14</th>\n      <th>15</th>\n    </tr>\n    <tr>\n      <th>1</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8902</td>\n      <td>8902</td>\n      <td>8902</td>\n      <td>8902</td>\n      <td>8902</td>\n      <td>8902</td>\n      <td>8902</td>\n      <td>8902</td>\n      <td>8902</td>\n      <td>8902</td>\n      <td>8902</td>\n      <td>8902</td>\n      <td>8902</td>\n      <td>8902</td>\n      <td>8902</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>9947</td>\n      <td>9947</td>\n      <td>9947</td>\n      <td>9947</td>\n      <td>9947</td>\n      <td>9947</td>\n      <td>9947</td>\n      <td>9947</td>\n      <td>9947</td>\n      <td>9947</td>\n      <td>9947</td>\n      <td>9947</td>\n      <td>9947</td>\n      <td>9947</td>\n      <td>9947</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>718</td>\n      <td>718</td>\n      <td>718</td>\n      <td>718</td>\n      <td>718</td>\n      <td>718</td>\n      <td>718</td>\n      <td>718</td>\n      <td>718</td>\n      <td>718</td>\n      <td>718</td>\n      <td>718</td>\n      <td>718</td>\n      <td>718</td>\n      <td>718</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6007</td>\n      <td>6007</td>\n      <td>6007</td>\n      <td>6007</td>\n      <td>6007</td>\n      <td>6007</td>\n      <td>6007</td>\n      <td>6007</td>\n      <td>6007</td>\n      <td>6007</td>\n      <td>6007</td>\n      <td>6007</td>\n      <td>6007</td>\n      <td>6007</td>\n      <td>6007</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>1442</td>\n      <td>1442</td>\n      <td>1442</td>\n      <td>1442</td>\n      <td>1442</td>\n      <td>1442</td>\n      <td>1442</td>\n      <td>1442</td>\n      <td>1442</td>\n      <td>1442</td>\n      <td>1442</td>\n      <td>1442</td>\n      <td>1442</td>\n      <td>1442</td>\n      <td>1442</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>530</td>\n      <td>530</td>\n      <td>530</td>\n      <td>530</td>\n      <td>530</td>\n      <td>530</td>\n      <td>530</td>\n      <td>530</td>\n      <td>530</td>\n      <td>530</td>\n      <td>530</td>\n      <td>530</td>\n      <td>530</td>\n      <td>530</td>\n      <td>530</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"       0      2      3      4      5      6      7      8      9      10  \\\n1                                                                          \n1   92388  92388  92388  92388  92388  92388  92388  92388  92388  92388   \n2    8902   8902   8902   8902   8902   8902   8902   8902   8902   8902   \n3    9947   9947   9947   9947   9947   9947   9947   9947   9947   9947   \n4     718    718    718    718    718    718    718    718    718    718   \n5    6007   6007   6007   6007   6007   6007   6007   6007   6007   6007   \n6    1442   1442   1442   1442   1442   1442   1442   1442   1442   1442   \n10    530    530    530    530    530    530    530    530    530    530   \n\n       11     12     13     14     15  \n1                                      \n1   92388  92388  92388  92388  92388  \n2    8902   8902   8902   8902   8902  \n3    9947   9947   9947   9947   9947  \n4     718    718    718    718    718  \n5    6007   6007   6007   6007   6007  \n6    1442   1442   1442   1442   1442  \n10    530    530    530    530    530  "},"exec_count":4,"output_type":"execute_result"}},"pos":5,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"cdc704","input":"len (product_descriptions)","output":{"0":{"data":{"text/plain":"119934"},"exec_count":4,"output_type":"execute_result"}},"pos":6,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":40,"id":"463fda","input":"#Get all the unique listings that are uncategorized\n\n_ , unique_listing = pd.factorize(uncategorized_listings['product_description'])","pos":48,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":41,"id":"d97e69","input":"# print(unique_listing)\ntokenize_1('(Masteron)100mgx10ml')","output":{"0":{"data":{"text/plain":"['(', 'masteron)100mgx10ml']"},"exec_count":41,"output_type":"execute_result"}},"pos":49,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":42,"id":"240105","input":"# for listing in unique_listing:\n#     print (listing)","pos":50,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":43,"id":"2e7fcd","input":"len(unique_listing)","output":{"0":{"data":{"text/plain":"216"},"exec_count":43,"output_type":"execute_result"}},"pos":51,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":44,"id":"0dc0a0","input":"#version with strings instead of a list\nimport pickle\nfile=open('drug_data' , 'wb')\npickle.dump(drug_data, file)\nfile.close()","pos":52,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":5,"id":"93070d","input":"# Only get transactions in Market 1\nproduct_descriptions = product_descriptions[product_descriptions.iloc[:,1] == 1]","pos":7,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":6,"id":"1cda69","input":"product_descriptions.to_csv(r'Uncategorized Listings.csv')","pos":4,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":6,"id":"7353b0","input":"lne","output":{"0":{"name":"stderr","output_type":"stream","text":"WARNING: Some output was deleted.\n"}},"pos":8,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":7,"id":"e9e16a","input":"product_descriptions.groupby(1).count()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>10</th>\n      <th>11</th>\n      <th>12</th>\n      <th>13</th>\n      <th>14</th>\n      <th>15</th>\n    </tr>\n    <tr>\n      <th>1</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n      <td>92388</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      0      2      3      4      5      6      7      8      9      10  \\\n1                                                                         \n1  92388  92388  92388  92388  92388  92388  92388  92388  92388  92388   \n\n      11     12     13     14     15  \n1                                     \n1  92388  92388  92388  92388  92388  "},"exec_count":7,"output_type":"execute_result"}},"pos":9,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":8,"id":"6d79f5","input":"# Investigate duplicate dates\nproduct_descriptions[product_descriptions.iloc[:,3] == 'dutch-christiana'].sort_values(by = 7).iloc[41:46,:]","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>10</th>\n      <th>11</th>\n      <th>12</th>\n      <th>13</th>\n      <th>14</th>\n      <th>15</th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table>\n</div>","text/plain":"Empty DataFrame\nColumns: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nIndex: []"},"exec_count":8,"output_type":"execute_result"}},"pos":10,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":9,"id":"5b3b3d","input":"# Function to convert numeric time to datetime object\ndef parseDate(raw_date, pattern = '%Y%m%d%H%M%S'):\n    string_date = str(raw_date)\n    return(datetime.strptime(string_date, pattern))\n\n# Parse the dates, and place in new column\nproduct_descriptions['dates'] = product_descriptions.iloc[:,7].apply(parseDate)","pos":11,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"09e12e","input":"## Converting Bitcoin to USD","pos":35,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2b50b1","input":"# Tokenizing Product Description","pos":12,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2e4448","input":"# Reading in file and converting timestamps","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"44ea65","input":"Get list of slang phrases that are multiple words","pos":20,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"4780bb","input":"Pickle the dataframe (so that it can be used in another file)","pos":40,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9c406b","input":"# Categorize drugs","pos":18,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e93aa5","input":"# Remove bad dates","pos":27,"state":"done","type":"cell"}
{"last_load":1571915296106,"type":"file"}