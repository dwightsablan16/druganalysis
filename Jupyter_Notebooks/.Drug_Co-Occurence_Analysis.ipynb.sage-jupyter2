{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":80920576},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.8"}},"trust":false,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"0c2bae","input":"#Get all the list of drugs predictions for each vendor\ndrug_lists = []\n\nfor buyer in unique_buyers:\n    buy = getDrugForBuyer(buyer)\n    drug_lists.append(buy)","pos":12,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"15298f","input":"buyer_and_drug.tail()","pos":7,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"311ade","input":"#fill dataframe with drug_prediction for each buyer\nbuyer_df['list_of_drugs'] = drug_lists","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"375331","input":"id_drug_df = id_drug_df.sort_values(by=['Buyer_ID'])","pos":31,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3ae852","input":"def getUniqueDrug(drug_list):\n    unique_drugs = list(set(drug_list))\n    \n    return unique_drugs","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4351ed","input":"buyer_and_drug.head()","pos":9,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"45b817","input":"# buyer_df.to_csv(r'buyer_df.csv', index = False)","pos":25,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4bc751","input":"#Get all the unique drugs for each buyer\nbuyer_df['unique_market'] = buyer_df.iloc[:,3].apply(getUniqueMarket)","pos":23,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"50c02a","input":"from collections import Counter\nfrom itertools import combinations\n\ncounter  = Counter()","pos":37,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"58ca85","input":"def getUniqueMarket(m_list):\n    unique_markets = list(set(m_list))\n    \n    return unique_markets","pos":21,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5b454b","input":"#fill dataframe with market ids for each buyer\nbuyer_df['market_number'] = market_list","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"602640","input":"#Get the first and last letter for each buyer\ndef getCharacters(vendor_name):\n    first_letter = vendor_name[0]\n    last_letter = vendor_name[-1]\n    \n    return first_letter + last_letter","pos":27,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"64fa50","input":"len(buyer_df)","pos":29,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"674b36","input":"#Get all the first and last letters of each buyer\nbuyer_df['buyer_ID'] = buyer_df.iloc[:,0].apply(getCharacters)","pos":28,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"6d6301","input":"#function to convert list to string\ndef flatten(drug_list):\n    str1 = ''.join(drug_list)\n    return str1\n\n#convert predictions from list to strings\nbuyer_and_drug['drug_cats'] = buyer_and_drug.iloc[:,3].apply(flatten)","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7662fb","input":"#Define a function to get all the market ids for each buyer\ndef getMarketOfBuyer(buyer):\n    \n    buyer_subset = buyer_and_drug[buyer_and_drug['buyer_name'] == buyer]\n\n    market_id_list = list(buyer_subset['market_id'])\n    \n    return market_id_list","pos":18,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7a1238","input":"buyer_df.head()","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7f5671","input":"#saving in a file\nimport pickle\nfile=open('market_co' , 'wb')\npickle.dump(market_co, file)\nfile.close()","pos":40,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"818693","input":"#Print the most common pairings\nmost_common = counter.most_common()\n\nmost_common","pos":39,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"83550f","input":"buyer_df.head()","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"88ba7c","input":"id_drug_df.to_csv(r'id_drug.csv', index = False)","pos":32,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"94acd4","input":"unique_buyers","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9e5129","input":"#Get all the list of market ids for each buyer\nmarket_list = []\n\nfor buyer in unique_buyers:\n    market_number = getMarketOfBuyer(buyer)\n    market_list.append(market_number)","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a99ad3","input":"","pos":34,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c2e102","input":"buyer_df.head()","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c6aa76","input":"#Make copy of dataframe with just buyer id and unique purchases\nid_drug_df = copy.deepcopy(buyer_df.iloc[:,[5,2]])\n\nid_drug_df.columns = ['Buyer_ID', 'Unique_Buys']","pos":30,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d74a03","input":"#Get dataframe with buyer names, market id, drug prediction\nbuyer_and_drug = copy.deepcopy(drug_data.iloc[:,[1,4,7,9]])\n\nbuyer_and_drug.columns = ['market_id','buyer_name','product_description','drug_prediction']","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e05e00","input":"buyer_df.head()","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f79bda","input":"#Get all the unique drugs for each buyer\nbuyer_df['unique_drug_predictions'] = buyer_df.iloc[:,1].apply(getUniqueDrug)","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f9b3a4","input":"#find the most common pairings of each list\nfor sub in drug_series:\n    if len(drug_series) < 2:\n        continue\n    sub.sort()\n    for comb in combinations(sub,2):\n        counter[comb] += 1","pos":38,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fea32a","input":"#Define a function to get all drug types for each buyer_name\ndef getDrugForBuyer(buyer):\n    \n    buyer_subset = buyer_and_drug[buyer_and_drug['buyer_name'] == buyer]\n\n    drug_pred_list = list(buyer_subset['drug_cats'])\n    \n    return drug_pred_list","pos":10,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ff1b15","input":"#Create a dataframe with all the unique buyer names\nbuyer_df = pd.DataFrame(unique_buyers)\nbuyer_df.columns = ['buyer_name']","pos":11,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"305629","input":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom itertools import compress\n\nimport datetime\nimport calendar\nfrom dateutil.parser import parse\nfrom matplotlib import rc\n\nimport math\nimport os\nimport copy\nimport pickle\n\nimport itertools\nimport operator","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"1fa7b0","input":"# Read in data (from pickle file)\nfile = open('drug_data','rb')\ndrug_data = pickle.load(file)","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"3d531d","input":"drug_data.tail()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>transaction_id</th>\n      <th>vendor_id</th>\n      <th>vendor_name</th>\n      <th>bitcoin</th>\n      <th>USD</th>\n      <th>product_description</th>\n      <th>date</th>\n      <th>drug_prediction</th>\n      <th>rating</th>\n      <th>feedback</th>\n      <th>drug_cats</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>119927</th>\n      <td>'121025</td>\n      <td>2031</td>\n      <td>SweetTreats</td>\n      <td>0</td>\n      <td>61.0</td>\n      <td>3 Piece - 61 USD - HOLIDAY SALE 17/EA | Distil...</td>\n      <td>2019-01-01 09:40:00</td>\n      <td>[marijuana]</td>\n      <td>5.0</td>\n      <td>great carts will buy again!</td>\n      <td>marijuana</td>\n    </tr>\n    <tr>\n      <th>119928</th>\n      <td>'121026</td>\n      <td>2031</td>\n      <td>SweetTreats</td>\n      <td>0</td>\n      <td>78.0</td>\n      <td>4 Piece - 78 USD - HOLIDAY SALE 17/EA | Distil...</td>\n      <td>2018-12-31 12:22:00</td>\n      <td>[marijuana]</td>\n      <td>5.0</td>\n      <td>great carts will buy again!</td>\n      <td>marijuana</td>\n    </tr>\n    <tr>\n      <th>119929</th>\n      <td>'121027</td>\n      <td>2031</td>\n      <td>SweetTreats</td>\n      <td>0</td>\n      <td>61.0</td>\n      <td>3 Piece - 61 USD - HOLIDAY SALE 17/EA | Distil...</td>\n      <td>2018-12-30 11:09:00</td>\n      <td>[marijuana]</td>\n      <td>4.0</td>\n      <td>great carts will buy again!</td>\n      <td>marijuana</td>\n    </tr>\n    <tr>\n      <th>119930</th>\n      <td>'121028</td>\n      <td>2031</td>\n      <td>SweetTreats</td>\n      <td>0</td>\n      <td>112.0</td>\n      <td>6 Piece - 112 USD - HOLIDAY SALE 17/EA | Disti...</td>\n      <td>2018-12-29 08:53:00</td>\n      <td>[marijuana]</td>\n      <td>5.0</td>\n      <td>Great value, good quality, quick shipping -- t...</td>\n      <td>marijuana</td>\n    </tr>\n    <tr>\n      <th>119932</th>\n      <td>'121030</td>\n      <td>2306</td>\n      <td>majordan</td>\n      <td>0</td>\n      <td>-1.0</td>\n      <td>1 Piece - 240 EUR - 1 bar of hublot pollen hash</td>\n      <td>2018-12-28 04:38:00</td>\n      <td>[hashish]</td>\n      <td>5.0</td>\n      <td>#####</td>\n      <td>hashish</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"       transaction_id  vendor_id  vendor_name bitcoin    USD  \\\n119927        '121025       2031  SweetTreats       0   61.0   \n119928        '121026       2031  SweetTreats       0   78.0   \n119929        '121027       2031  SweetTreats       0   61.0   \n119930        '121028       2031  SweetTreats       0  112.0   \n119932        '121030       2306     majordan       0   -1.0   \n\n                                      product_description                date  \\\n119927  3 Piece - 61 USD - HOLIDAY SALE 17/EA | Distil... 2019-01-01 09:40:00   \n119928  4 Piece - 78 USD - HOLIDAY SALE 17/EA | Distil... 2018-12-31 12:22:00   \n119929  3 Piece - 61 USD - HOLIDAY SALE 17/EA | Distil... 2018-12-30 11:09:00   \n119930  6 Piece - 112 USD - HOLIDAY SALE 17/EA | Disti... 2018-12-29 08:53:00   \n119932    1 Piece - 240 EUR - 1 bar of hublot pollen hash 2018-12-28 04:38:00   \n\n       drug_prediction  rating  \\\n119927     [marijuana]     5.0   \n119928     [marijuana]     5.0   \n119929     [marijuana]     4.0   \n119930     [marijuana]     5.0   \n119932       [hashish]     5.0   \n\n                                                 feedback  drug_cats  \n119927                        great carts will buy again!  marijuana  \n119928                        great carts will buy again!  marijuana  \n119929                        great carts will buy again!  marijuana  \n119930  Great value, good quality, quick shipping -- t...  marijuana  \n119932                                              #####    hashish  "},"exec_count":3,"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"825997","input":"#Get all the unique buyer names \n_ , unique_buyers = pd.factorize(drug_data['buyer_name'])","output":{"0":{"ename":"KeyError","evalue":"'buyer_name'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2656\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2657\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2658\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'buyer_name'","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-2c91b1815d59>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#Get all the unique buyer names\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0m_\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0munique_buyers\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfactorize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdrug_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'buyer_name'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2925\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2926\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2927\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2928\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2929\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2657\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2658\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2659\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_cast_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2660\u001b[0m         \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtolerance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2661\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'buyer_name'"]}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"e4f872","input":"#Get the list unique drugs for each buyer\ndrug_series = buyer_df['unique_drug_predictions'].tolist()","output":{"0":{"ename":"NameError","evalue":"name 'buyer_df' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-8c842d99f7ac>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#Get the list unique drugs for each buyer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdrug_series\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuyer_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'unique_drug_predictions'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtolist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'buyer_df' is not defined"]}},"pos":36,"type":"cell"}
{"cell_type":"markdown","id":"191a26","input":"## Get all the unique drugs for each vendor","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"41f0ee","input":"## Investigate Drug Co-Occurence\n","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"481604","input":"## Check for relation in buyer name and buying habits\n","pos":26,"type":"cell"}
{"cell_type":"markdown","id":"6f83d2","input":"### Note: did not see many similarities","pos":33,"type":"cell"}
{"id":0,"time":1564764596942,"type":"user"}
{"last_load":1564764450769,"type":"file"}