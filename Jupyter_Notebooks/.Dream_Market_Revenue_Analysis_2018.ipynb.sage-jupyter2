{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":80936960},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"}},"trust":false,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"012081","input":"#Set index to vendor name\n# revenue_summary_df = revenue_summary_df.set_index('vendor_name')\n\n# revenue_summary_df.head()\n#Drop duplicate vendor names\nrevenue_summary_df = revenue_summary_df.loc[~revenue_summary_df.index.duplicated(keep='first')]\n\n#Reset index of dataframe\nrevenue_summary_df = revenue_summary_df.reset_index()","pos":31,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"171463","input":"#Reset index\nnew_sum_of_revenue_per_vendor = sum_of_revenue_per_vendor.reset_index()","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"23ec69","input":"#Create dictionary for total revenue for each vendor\ntotal_revenue = new_sum_of_revenue_per_vendor.groupby([new_sum_of_revenue_per_vendor.vendor_name]).USD.sum()","pos":23,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"25c54e","input":"sum_of_revenue_per_vendor.head()","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"270a98","input":"# # create a function to fill total revenue dataframe\n# def getRevenueForVendor(vendor_name):\n# #     Args: Name of a vendor (string)\n# #     Returns: series, representing total revenue per drug category\n#     vendor_subset = new_sum_of_revenue_per_vendor[new_sum_of_revenue_per_vendor['vendor_name'] == vendor_name]\n#     vendor_drug_revenue = vendor_subset['USD'].groupby(vendor_subset['drug_cats']).sum()\n# #     vendor_drug_revenue = vendor_subset['drug_cats'].groupby(vendor_subset['drug_cats']).sum()\n#     return(vendor_drug_revenue)","pos":45,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2bf506","input":"# #Create a dataframe with cols = cats; rows = vendors\n# total_revenue_table = pd.DataFrame(columns = drug_categories)\n\n# #Insert vendor name column\n# total_revenue_table.insert(0, \"Vendor_Name\", vendor_list)","pos":44,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2c5e0d","input":"# vendor_list","pos":41,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2de110","input":"#Make copy of dataframe\nrevenue_summary_df = new_sum_of_revenue_per_vendor.copy()\n\n# revenue_summary_df.head()","pos":30,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"322763","input":"# REVENUE STATISTICS\n\n#Min, Max, Average, Total revenue\nminimum_rev = revenue_summary_df.total_revenue.min()\nmaximum_rev = revenue_summary_df.total_revenue.max()\naverage_rev = revenue_summary_df.total_revenue.mean()\n\nprint ('REVENUE STATISTICS:')\nprint ('Minimum: ' , minimum_rev)\nprint ('Maximum: ' , maximum_rev)\nprint ('Average: ' , average_rev)\nprint ('Total: ' , total, '\\n')\n\n\n#max and min rev among vendors\nprint ('Min revenue vendor: ' , revenue_summary_df.loc[revenue_summary_df.total_revenue.idxmin()], '\\n')\nprint ('Max revenue vendor: ', revenue_summary_df.loc[revenue_summary_df.total_revenue.idxmax()])\n","pos":34,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3e0f39","input":"# ## Sample\n\n# data2 = [['d1','d1','d1','d2','d2','d2','d3','d3','d3'],\n#         ['v1', 'v2', 'v3', 'v1', 'v2', 'v3', 'v1', 'v2', 'v3'],\n#         [1, 2, 3, 4, 5, 6, 7, 8, 9]]\n\n# rows = zip(data2[0], data2[1], data2[2])\n# headers = ['cat', 'vend', 'usd']\n# df2 = pd.DataFrame(rows, columns=headers)\n\n# fig, ax = plt.subplots(figsize=(10,7))  \n\n# vends = df2['vend'].drop_duplicates()\n# margin_bottom = np.zeros(len(df2['cat'].drop_duplicates()))\n# colors = [\"#006D2C\", \"#31A354\",\"#74C476\"]\n\n\n# for num, vend in enumerate(vends):\n#     #values is the list of values for a given month\n#     values = list(df2[df2['vend'] == vend].loc[:, 'usd'])\n# #     print (values)\n#     df2[df2['vend'] == vend].plot.bar(x='cat',y='usd', ax=ax, stacked=True, \n#                                     bottom = margin_bottom, color=colors[num], label=vend)\n#     margin_bottom += values\n\n# plt.show()\n\n# df2.shape","pos":21,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"45c2dc","input":"# get unique drug categories\n_ , drug_categories = pd.factorize(drugs_df['drug_cats'], sort = True)\n# drug_categories\n\n# get unique vendor names\n_ , vendor_list = pd.factorize(drugs_df['vendor_name'], sort = True)\n\n# print (vendor_list)","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"47a3e7","input":"#Reset the index to vendor_name\n# total_revenue_table = total_revenue_table.set_index('Vendor_Name')","pos":49,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"57fffd","input":"new_sum_of_revenue_per_vendor","pos":27,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"6f6762","input":"# new_sum_of_revenue_per_vendor.head()\nnew_sum_of_revenue_per_vendor","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7a4d3b","input":"","pos":43,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7be466","input":"","pos":42,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"877dab","input":"#What percentage of total market revenue does each vendor make?\n\nfig, ax = plt.subplots(figsize=(15,9))  \nfig.suptitle('PERCENTAGE OF MARKET REVENUE PER VENDOR', fontsize=20)\n\nrevenue_summary_df.sort_values(\"percentage_of_total_revenue\",ascending = False).plot.bar(\n                                 y='percentage_of_total_revenue', \n                                 ax=ax, \n                                 color = rand_color.generate())\nplt.ylim([0.0, 0.01])\nax.set_xticklabels([])\nax.set_ylabel('PERCENT OF REVENUE')\nax.set_xlabel('VENDORS')\n\nplt.show()\n\n#Key takeaways: \n    # - vendor with most revenue generates .8% of total market revenue so it is not dominated by single vendor","pos":38,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"88fb0c","input":"new_sum_of_revenue_per_vendor['percentage_of_total_revenue'] = np.divide(new_sum_of_revenue_per_vendor['total_revenue'], total_revenue)","pos":29,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"98d290","input":"new_sum_of_revenue_per_vendor.head()","pos":26,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9ca6de","input":"# #Function that gets the column given the drug\n# def getDrugRevenue(drug_cat):\n#     total_revenue_per_drug = total_revenue_table.loc[:,drug_cat]\n#     return total_revenue_per_drug\n\n# # print (getDrugRevenue(''))","pos":50,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9ebbe3","input":"#How much revenue does each vendor generate in Dream Market?\n\nfig, ax = plt.subplots(figsize=(15,9))  \n\nfig.suptitle('TOTAL REVENUE PER VENDOR', fontsize=20)\n\n# ylim(top=20000)  # adjust the top leaving bottom unchanged\n\n# df.groupby(['Id']).median().sort_values(\"Speed\").plot.bar()\nrevenue_summary_df.sort_values(\"total_revenue\",ascending = False).plot.bar(\n                                 y='total_revenue', \n                                 ax=ax, \n                                 color = rand_color.generate())\nplt.ylim([0, 30000])\nax.set_xticklabels([])\nax.set_ylabel('TOTAL REVENUE')\nax.set_xlabel('VENDORS')\n\nplt.show()","pos":35,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a08be2","input":"\n# total_revenue = new_sum_of_revenue_per_vendor['USD'].sum()","pos":40,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a8cf95","input":"# # drug_categories\n# value_dict = {cat:0 for cat in drug_categories}\n# for idx, row in mini_df.iterrows():\n#     drug_cat = row['drug_cats']\n#     value = row['USD']\n#     value_dict[drug_cat] = value","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b56a6a","input":"# total_revenue_table.head()","pos":47,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b7c809","input":"revenue_summary_df.head()","pos":32,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c081b5","input":"#Get the sum of revenue for a given category per vendor\nsum_of_revenue_per_vendor = pd.DataFrame(drugs_df.groupby([drugs_df.vendor_name,drugs_df.drug_cats]).USD.sum())","pos":12,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ca66f2","input":"#Get the percentage of revenue per drug per vendor\nnew_sum_of_revenue_per_vendor['percentage_of_revenue'] = np.divide(new_sum_of_revenue_per_vendor['USD'], new_sum_of_revenue_per_vendor['total_revenue'])","pos":28,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d4c694","input":"# revenue_summary_df.percentage_of_total_revenue","pos":37,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d899ca","input":"# # Apply function to dataframe\n# total_revenue_table.iloc[:,1:] = total_revenue_table['Vendor_Name'].apply(getRevenueForVendor)\n\n# #Fill the rest of values with zeros\n# total_revenue_table = total_revenue_table.fillna(0)","pos":46,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e11bae","input":"#Apply getTotalRevenue function\nnew_sum_of_revenue_per_vendor['total_revenue'] = new_sum_of_revenue_per_vendor.iloc[:,0].apply(getTotalRevenue)","pos":25,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e4f580","input":"new","pos":52,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e78b3a","input":"# #Function that gets the values for each vendor\n# def getVendorRevenueRow(vendor):\n# #     total_revenue_per_vendor = total_revenue_table.loc[vendor,:]\n#     total_revenue_per_vendor = total_revenue_table.loc[vendor]\n# #     total_revenue_per_vendor = total_revenue_table[total_revenue_table['Vendor_Name'] == vendor]\n#     return total_revenue_per_vendor\n\n# print (list(getVendorRevenueRow('1stopquickshop')))","pos":51,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e9b6a9","input":"#Convert vendor_name column to string\n# total_revenue_table['Vendor_Name'] = total_revenue_table['Vendor_Name'].astype(str)\n# total_revenue_table.dtypes","pos":48,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ea7d71","input":"#Create a function that gets total revenue per vendor\ndef getTotalRevenue(vendor):\n    for key, value in total_revenue.items():\n        if vendor == key:\n            return (value)","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f1ae17","input":"#Color generator\nfrom tqdm import tqdm\nimport randomcolor\nrand_color = randomcolor.RandomColor()\n# print(rand_color.generate())","pos":18,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fc7a15","input":"%matplotlib inline\nimport matplotlib\n\nmatplotlib.style.use('ggplot')\n\nfig, ax = plt.subplots(figsize=(15,9))  \n\n#list of vendors\nvendors = new_sum_of_revenue_per_vendor['vendor_name'].drop_duplicates()\n\n#distance from x axis\nmargin_bottoms = np.zeros(len(new_sum_of_revenue_per_vendor['drug_cats'].drop_duplicates()))\n# print (margin_bottom)\n# colors = [\"#006D2C\", \"#31A354\",\"#74C476\"]\n\n#Drug categories\ndrug_categories\n\n#For loop that generates bars\nfor num, vendor in tqdm(enumerate(vendors)):\n#     print(vendor)\n    \n    #values is the list of revenues for a given vendor\n#     values = list(new_sum_of_revenue_per_vendor[new_sum_of_revenue_per_vendor['vendor_name'] == vendor].loc[:, 'USD'])\n    vendor_subset = new_sum_of_revenue_per_vendor[new_sum_of_revenue_per_vendor['vendor_name'] == vendor]\n    \n    # drug_categories\n    value_dict = {cat:0 for cat in drug_categories}\n    for idx, row in vendor_subset.iterrows():\n        drug_cat = row['drug_cats']\n        value = row['USD']\n        value_dict[drug_cat] = value\n    \n    values = list(value_dict.values())\n    \n#     dict_df = pd.DataFrame(value_dict, index = [0])\n    dict_df = pd.DataFrame(value_dict, index = [0]).transpose().reset_index()\n    \n    dict_df.plot.bar(x='index',\n                                 y=0, \n                                 ax=ax,\n                                 stacked=True, \n                                 bottom = margin_bottoms, \n                                 color = rand_color.generate(), \n                                 label=vendor)\n    \n#     new_sum_of_revenue_per_vendor[new_sum_of_revenue_per_vendor['vendor_name'] == vendor].plot.bar(x='drug_cats',\n#                                  y='USD', \n#                                  ax=ax,\n#                                  stacked=True, \n#                                  bottom = margin_bottoms, \n#                                  color = rand_color.generate(), \n#                                  label=vendor)\n    \n    margin_bottoms += values\n    \nplt.show()","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fd0a04","input":"# #How much revenue is each vendor making in entire market\n\n# #Get unique vendors\n\n\n# fig, ax = plt.subplots(figsize=(15,9))  \n\n# new_sum_of_revenue_per_vendor.plot.bar(x='vendor_name',\n#                                  y='percentage_of_revenue', \n#                                  ax=ax, \n#                                  color = rand_color.generate())\n\n# plt.show()","pos":39,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"c43308","input":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom itertools import compress\n\nimport datetime\nfrom dateutil.parser import parse\nfrom matplotlib import rc\n\nimport math\nimport os\nimport copy\nimport pickle\n\nimport itertools\nimport operator","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"8aaa33","input":"# Read in data (from pickle file)\nfile = open('drug_data.dms','rb')\ndrug_data = pickle.load(file)","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"31bc21","input":"drug_data.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>transaction_id</th>\n      <th>vendor_id</th>\n      <th>vendor_name</th>\n      <th>bitcoin</th>\n      <th>USD</th>\n      <th>product_description</th>\n      <th>date</th>\n      <th>drug_prediction</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>9430</th>\n      <td>'10528</td>\n      <td>590</td>\n      <td>superclr</td>\n      <td>0</td>\n      <td>416.00</td>\n      <td>5 GRAMS GRADE AAA+ CARTEL TAN POWDER HEROIN</td>\n      <td>2018-11-02 06:43:01</td>\n      <td>[heroin]</td>\n    </tr>\n    <tr>\n      <th>9431</th>\n      <td>'10529</td>\n      <td>590</td>\n      <td>superclr</td>\n      <td>0</td>\n      <td>416.00</td>\n      <td>5 GRAMS GRADE AAA+ CARTEL TAN POWDER HEROIN</td>\n      <td>2018-11-10 06:43:01</td>\n      <td>[heroin]</td>\n    </tr>\n    <tr>\n      <th>9432</th>\n      <td>'10530</td>\n      <td>1013</td>\n      <td>REAL_MEGASTORE</td>\n      <td>0</td>\n      <td>3.12</td>\n      <td>?CRAVETV.CA? PREMIUM</td>\n      <td>2018-12-27 06:43:06</td>\n      <td>[]</td>\n    </tr>\n    <tr>\n      <th>9433</th>\n      <td>'10531</td>\n      <td>1013</td>\n      <td>REAL_MEGASTORE</td>\n      <td>0</td>\n      <td>3.12</td>\n      <td>?CRAVETV.CA? PREMIUM</td>\n      <td>2018-12-27 06:43:06</td>\n      <td>[]</td>\n    </tr>\n    <tr>\n      <th>9435</th>\n      <td>'10533</td>\n      <td>92</td>\n      <td>OnionKings</td>\n      <td>0</td>\n      <td>109.12</td>\n      <td>Rivotril 2mg från apotek (Roche) [100st]</td>\n      <td>2018-12-21 06:43:11</td>\n      <td>[benzodiazepines]</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"     transaction_id  vendor_id     vendor_name bitcoin     USD  \\\n9430         '10528        590        superclr       0  416.00   \n9431         '10529        590        superclr       0  416.00   \n9432         '10530       1013  REAL_MEGASTORE       0    3.12   \n9433         '10531       1013  REAL_MEGASTORE       0    3.12   \n9435         '10533         92      OnionKings       0  109.12   \n\n                              product_description                date  \\\n9430  5 GRAMS GRADE AAA+ CARTEL TAN POWDER HEROIN 2018-11-02 06:43:01   \n9431  5 GRAMS GRADE AAA+ CARTEL TAN POWDER HEROIN 2018-11-10 06:43:01   \n9432                         ?CRAVETV.CA? PREMIUM 2018-12-27 06:43:06   \n9433                         ?CRAVETV.CA? PREMIUM 2018-12-27 06:43:06   \n9435     Rivotril 2mg från apotek (Roche) [100st] 2018-12-21 06:43:11   \n\n        drug_prediction  \n9430           [heroin]  \n9431           [heroin]  \n9432                 []  \n9433                 []  \n9435  [benzodiazepines]  "},"exec_count":3,"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"1c041f","input":"#Create dataframe with just vendor id, vendor name, USD, drug_prediction \ndrugs_df = copy.deepcopy(drug_data.iloc[:,[1,2,4,6,7]])\ndrugs_df.columns = ['vendor_id','vendor_name','USD','date','drug_prediction']","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"26656e","input":"drugs_df.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>vendor_id</th>\n      <th>vendor_name</th>\n      <th>USD</th>\n      <th>date</th>\n      <th>drug_prediction</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>9430</th>\n      <td>590</td>\n      <td>superclr</td>\n      <td>416.00</td>\n      <td>2018-11-02 06:43:01</td>\n      <td>[heroin]</td>\n    </tr>\n    <tr>\n      <th>9431</th>\n      <td>590</td>\n      <td>superclr</td>\n      <td>416.00</td>\n      <td>2018-11-10 06:43:01</td>\n      <td>[heroin]</td>\n    </tr>\n    <tr>\n      <th>9432</th>\n      <td>1013</td>\n      <td>REAL_MEGASTORE</td>\n      <td>3.12</td>\n      <td>2018-12-27 06:43:06</td>\n      <td>[]</td>\n    </tr>\n    <tr>\n      <th>9433</th>\n      <td>1013</td>\n      <td>REAL_MEGASTORE</td>\n      <td>3.12</td>\n      <td>2018-12-27 06:43:06</td>\n      <td>[]</td>\n    </tr>\n    <tr>\n      <th>9435</th>\n      <td>92</td>\n      <td>OnionKings</td>\n      <td>109.12</td>\n      <td>2018-12-21 06:43:11</td>\n      <td>[benzodiazepines]</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      vendor_id     vendor_name     USD                date    drug_prediction\n9430        590        superclr  416.00 2018-11-02 06:43:01           [heroin]\n9431        590        superclr  416.00 2018-11-10 06:43:01           [heroin]\n9432       1013  REAL_MEGASTORE    3.12 2018-12-27 06:43:06                 []\n9433       1013  REAL_MEGASTORE    3.12 2018-12-27 06:43:06                 []\n9435         92      OnionKings  109.12 2018-12-21 06:43:11  [benzodiazepines]"},"exec_count":5,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"331842","input":"subset = drugs_df[['USD','drug_prediction']]\ntuples = list([tuple(x) for x in subset.values])\n\n\n#function to convert list to string\ndef flatten(drug_list):\n    str1 = ''.join(drug_list)\n    return str1\n\n\ndrugs_df['drug_cats'] = drugs_df.iloc[:,4].apply(flatten)","pos":7,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"6e13a3","input":"drugs_df.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>vendor_id</th>\n      <th>vendor_name</th>\n      <th>USD</th>\n      <th>date</th>\n      <th>drug_prediction</th>\n      <th>drug_cats</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>9430</th>\n      <td>590</td>\n      <td>superclr</td>\n      <td>416.00</td>\n      <td>2018-11-02 06:43:01</td>\n      <td>[heroin]</td>\n      <td>heroin</td>\n    </tr>\n    <tr>\n      <th>9431</th>\n      <td>590</td>\n      <td>superclr</td>\n      <td>416.00</td>\n      <td>2018-11-10 06:43:01</td>\n      <td>[heroin]</td>\n      <td>heroin</td>\n    </tr>\n    <tr>\n      <th>9432</th>\n      <td>1013</td>\n      <td>REAL_MEGASTORE</td>\n      <td>3.12</td>\n      <td>2018-12-27 06:43:06</td>\n      <td>[]</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>9433</th>\n      <td>1013</td>\n      <td>REAL_MEGASTORE</td>\n      <td>3.12</td>\n      <td>2018-12-27 06:43:06</td>\n      <td>[]</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>9435</th>\n      <td>92</td>\n      <td>OnionKings</td>\n      <td>109.12</td>\n      <td>2018-12-21 06:43:11</td>\n      <td>[benzodiazepines]</td>\n      <td>benzodiazepines</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      vendor_id     vendor_name     USD                date  \\\n9430        590        superclr  416.00 2018-11-02 06:43:01   \n9431        590        superclr  416.00 2018-11-10 06:43:01   \n9432       1013  REAL_MEGASTORE    3.12 2018-12-27 06:43:06   \n9433       1013  REAL_MEGASTORE    3.12 2018-12-27 06:43:06   \n9435         92      OnionKings  109.12 2018-12-21 06:43:11   \n\n        drug_prediction        drug_cats  \n9430           [heroin]           heroin  \n9431           [heroin]           heroin  \n9432                 []                   \n9433                 []                   \n9435  [benzodiazepines]  benzodiazepines  "},"exec_count":7,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"fe5748","input":"#Get average USD grouped by drug\naverage_price_of_drug = pd.DataFrame(drugs_df.groupby('drug_cats', as_index=False)['USD'].mean())\n\naverage_price_of_drug.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>drug_cats</th>\n      <th>USD</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td></td>\n      <td>327.449813</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>amphetamine</td>\n      <td>153.853015</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>antidepressants</td>\n      <td>13.520000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>benzodiazepines</td>\n      <td>204.857975</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>benzodiazepinesnot_drugs</td>\n      <td>53.352571</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                  drug_cats         USD\n0                            327.449813\n1               amphetamine  153.853015\n2           antidepressants   13.520000\n3           benzodiazepines  204.857975\n4  benzodiazepinesnot_drugs   53.352571"},"exec_count":8,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"de8429","input":"#Plot average prices\nfig, ax = plt.subplots(figsize=(20,12))  \n\naverage_price_of_drug.plot.bar(x='drug_cats',\n                                 y='USD', \n                                 ax=ax, \n                                 color = rand_color.generate())\n\nplt.show()","output":{"0":{"ename":"NameError","evalue":"name 'rand_color' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-149bd0ecf5fe>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m                                  \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'USD'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m                                  \u001b[0max\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m                                  color = rand_color.generate())\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'rand_color' is not defined"]},"1":{"data":{"image/png":"ebecdd21f19ddc1f041767dc22d0e28de4a62d57","text/plain":"<Figure size 1440x864 with 1 Axes>"},"exec_count":9,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"5f5dde","input":"## Total Revenue Per Vendor","pos":33,"type":"cell"}
{"cell_type":"markdown","id":"630581","input":"## Calculate total revenue per vendor","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"631446","input":"### Average Cost for a given drug","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"714d98","input":"### Get drug distribution of revenue for each vendor ","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"75e079","input":"## Drug Costs Analysis","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"d2b6b2","input":"## Create Stacked Plot of Revenue per drug\n","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"f640df","input":"## Percentage of market revenue per vendor","pos":36,"type":"cell"}
{"id":0,"time":1564602363244,"type":"user"}
{"last_load":1564602363715,"type":"file"}