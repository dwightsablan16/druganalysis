{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":80990208},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.5"}},"type":"settings"}
{"cell_type":"code","collapsed":true,"exec_count":7,"id":"7a9ffe","input":"a = drug_df.groupby(['drug_prediction', pd.Grouper(key='date', freq='M'),'vendor_name'])\nb = a.USD.sum()\n\n# Get Gini index for each drug over time\ndrug_ginis_overtime = b.groupby(['drug_prediction', 'date']).apply(giniWrapper)\n\ndrug_subset_ginis = ['marijuana', 'cocaine', 'heroin', 'benzodiazepines', 'methamphetamine']\nplt.figure(figsize = (18,10))\nplt.rcParams.update({'font.size': 15})\nfor drug in drug_subset_ginis:\n    plt.plot(drug_ginis_overtime[drug], lw = 7)\nplt.legend(labels = drug_subset_ginis)\nplt.title('Gini indices over time (only active sellers of each given drug are considered)')\nplt.ylabel('Gini index')\nplt.xlabel('Date')\nplt.show()","output":{"0":{"data":{"image/png":"384759dd4bbd99275d3ad10538601d421b756c54","text/plain":"<Figure size 1296x720 with 1 Axes>"},"output_type":"display_data"}},"pos":12,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":13,"id":"acd7be","input":"# First, compute overall Gini over time\na = drug_df.groupby([pd.Grouper(key='date', freq='M'),'vendor_name'])\nb = a.USD.sum()\n\n# Get Gini index for each drug over time\nginis_overtime = b.groupby(['date']).apply(giniWrapper)\n\n\n# Plot results\nplt.figure(figsize = (18,10))\nplt.rcParams.update({'font.size': 15})\ndrugs = ['marijuana', 'cocaine', 'benzodiazepines', 'methamphetamine', 'heroin', 'ketamine']\n# grouped_by_date.apply(getGiniFromDf)[datetime(2018,5,31)]['heroin']\nfor drug in drugs:\n    plt.plot(drug_ginis_over_time[drug], lw = 5)\nplt.plot(ginis_overtime.values, lw = 7)\n\n# Append 'total' to drug list (for legend)\ndrugs.append('total')\n\n# Set xlabels\nxlabs = [str(each_date.month) + 'â€“' + str(each_date.year) for each_date in ginis_overtime.index]\nplt.xticks(np.arange(10), xlabs)\nplt.title('Gini index over time (among vendors with at least one sale in the given interval)')\nplt.ylabel('Gini index')\nplt.legend(drugs)\nplt.xlabel('Date')\nplt.ylim(bottom = .6, top = 1)\nplt.show()","output":{"0":{"data":{"image/png":"e8a5afecc7b7251fe5ccaa81968ffc176258f8de","text/plain":"<Figure size 1296x720 with 1 Axes>"},"output_type":"display_data"}},"pos":17,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":183,"id":"958c36","input":"drug_subset = ['benzodiazepines', 'cocaine', 'marijuana', 'heroin', 'methamphetamine', 'ecstasy', 'ketamine']\n\n# Get proportion of NA values\nnp.sum(drug_df.price_per_gram.isnull()) / drug_df.shape[0]\n\n# Drop rows with NA value in price per gram column\ndrug_df_nonas = drug_df.dropna(axis = 'index', subset = ['price_per_gram'])\n\n# Function to plot the number of features per drug category over time\ndef plotFeaturePerDrugOverTime(interval_code, feature, df = drug_df, make_stackplot = False, func = None):\n    plt.rcParams.update({'font.size': 15})\n    \n    if func is None: \n        feature_per_drug = df.groupby(['drug_prediction', \n                                            pd.Grouper(key='date', freq=interval_code)])[feature].nunique()\n    else:\n        feature_per_drug = df.groupby(['drug_prediction', \n                                            pd.Grouper(key='date', freq=interval_code)])[feature].apply(func)\n    \n    plt.figure(figsize = (15,7))\n    if make_stackplot:\n        idx = feature_per_drug[drug_subset[0]].index\n        y = [feature_per_drug[drug] for drug in drug_subset]\n        plt.stackplot(idx, y, labels = drug_subset)\n    else:    \n        for drug in drug_subset:\n            plt.plot(feature_per_drug[drug].index, feature_per_drug[drug], ls = '-', lw = 5)\n    plt.legend(drug_subset, loc = 'upper left')\n    plt.title('Number of '+ feature +' per drug category')\n    plt.xlabel('Interval start')\n    plt.ylabel('Number of ' + feature)\n    plt.xticks(rotation='vertical')\n    plt.show()\n    \n# Plot results\nplotFeaturePerDrugOverTime('M', 'vendor_id', make_stackplot = True)\nplotFeaturePerDrugOverTime('2W', 'transaction_id', make_stackplot = True)\nplotFeaturePerDrugOverTime('M', 'USD', make_stackplot = True, func = np.sum)\n\nplotFeaturePerDrugOverTime('W', 'USD', func = np.median)\nplotFeaturePerDrugOverTime('M', 'USD', func = np.mean)\nplotFeaturePerDrugOverTime('M', 'USD', func = np.max)\nplotFeaturePerDrugOverTime('M', 'USD', func = np.min)\n\n# plotFeaturePerDrugOverTime('M', 'price_per_gram', df = drug_df_nonas, func = np.max)","output":{"0":{"data":{"image/png":"7a0473199e62478bb6a180699682b87722a75901","text/plain":"<Figure size 1080x504 with 1 Axes>"},"output_type":"display_data"},"1":{"data":{"image/png":"b25a57aa2414c8ab405472200e5262f19ca41024","text/plain":"<Figure size 1080x504 with 1 Axes>"},"output_type":"display_data"},"2":{"data":{"image/png":"8cb254a3605cf907be2c36d662a0499972c0eb1e","text/plain":"<Figure size 1080x504 with 1 Axes>"},"output_type":"display_data"},"3":{"data":{"image/png":"1a604d2ccc5e38042d580434145f6049670129a7","text/plain":"<Figure size 1080x504 with 1 Axes>"},"output_type":"display_data"},"4":{"data":{"image/png":"f556fd8e04f010f0e08faa802ca543e0b60be949","text/plain":"<Figure size 1080x504 with 1 Axes>"},"output_type":"display_data"},"5":{"data":{"image/png":"bfb7c87f646fcb35da206357c54772ddfd6ca2de","text/plain":"<Figure size 1080x504 with 1 Axes>"},"output_type":"display_data"},"6":{"data":{"image/png":"f09211f20ebefc023dea3f99ce0f2b21c169295a","text/plain":"<Figure size 1080x504 with 1 Axes>"},"output_type":"display_data"}},"pos":6,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":2,"id":"5cf81c","input":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom itertools import compress\n\nfrom datetime import datetime\nfrom dateutil.parser import parse\n\nimport math\nimport os\nimport copy\nimport pickle\n\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()","pos":0,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"9f68ca","input":"file = open('drug_df_prices', 'rb')\ndrug_df = pickle.load(file)\nfile.close()","pos":2,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":384,"id":"94cc7b","input":"drug_subset = ['benzodiazepines', 'cocaine', 'marijuana', 'heroin', 'methamphetamine', 'ecstasy', 'ketamine']\ndrug_subset = pd.unique(drug_df.drug_prediction)\n\ninterval_code = 'M' # Time interval to use\nfeature = 'transaction_id' # Feature to look at\n\n# compute statistics for each drug\nfeature_per_drug = drug_df.groupby(['drug_prediction', \n    pd.Grouper(key='date', freq=interval_code)])[feature].nunique()\n# feature_per_drug = drug_df.groupby(['drug_prediction', pd.Grouper(key='date', freq=interval_code)])[feature].sum()\n\n# compute overall statistics for time period\ninterval_stats = drug_df.groupby(pd.Grouper(key='date', freq=interval_code))[feature].nunique()\n# interval_stats = drug_df.groupby(pd.Grouper(key='date', freq=interval_code))[feature].sum()\n\n# join the two dataframes together\nfeature_per_drug = feature_per_drug.to_frame().join(interval_stats, on = 'date', rsuffix = '_total')\nfeature_per_drug.columns = [feature+'_for_drug', 'total_'+feature+'_count'] # Rename columns\n\n# Compute proportion of total feature\nfeature_per_drug['proportion'] = feature_per_drug[feature+'_for_drug'] / feature_per_drug['total_'+feature+'_count']\n\n# Rearrange results for stack-plotting\nfirst_drug = drug_subset[0]\ndf = feature_per_drug.loc[first_drug,'proportion'].to_frame()\nfor drug in drug_subset[1:]:\n        df = df.join(feature_per_drug.loc[drug, 'proportion'], on = 'date', rsuffix = '_'+drug)\ndf.columns = drug_subset\n\n# Reorder the columns so that drug columns are in decreasing order (according to mean value of each column)\nmean_vals = df.mean().sort_values(ascending = False)\n\n# Remove drugs below a given threshold (replace with 'other')\nother_thresh = .02\nnew_order = list(mean_vals[mean_vals > other_thresh].index)\n\n# Update columns\ndf = df[new_order]\ndf = df.fillna(0) # Fill any NaN values with 0\n\n# Add 'other' column to represent drugs below threshold\nother = 1 - df.sum(axis = 1)\ndf = df.join(other.rename('other'), on = 'date')\nnew_order.append('other')\n\n# Set color palette\nimport seaborn as sns\nsns.set_palette(sns.color_palette(\"hls\", len(new_order)))\n\n# Line graph\nplt.rcParams.update({'font.size': 15})\nplt.figure(figsize = (15,8))\nplt.plot(df.index, np.array(df), lw = 5)\nplt.legend(new_order, bbox_to_anchor=(1.3, 1))\nplt.title('Proportion of '+ feature+' over time')\nplt.xlabel('Date')\nplt.ylabel('Proportion')\nplt.show()\n\n# Stack plot\nplt.figure(figsize = (15,8))\nplt.stackplot(df.index, np.array(df).transpose())\nplt.legend(new_order, bbox_to_anchor=(1.3, 1))\nplt.title('Proportion of '+ feature+' over time')\nplt.xlabel('Date')\nplt.ylabel('Proportion')\nplt.savefig('hello.png', dpi=500)\nplt.show()","output":{"0":{"data":{"image/png":"dce21ef0d54b4b1eb40832fa1443387350b12b06","text/plain":"<Figure size 1080x576 with 1 Axes>"},"output_type":"display_data"},"1":{"data":{"image/png":"dda621f1800e8dcbeadf320bec75c15a9337bab4","text/plain":"<Figure size 1080x576 with 1 Axes>"},"output_type":"display_data"}},"pos":8,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"f77396","input":"# Function plots number of transactions per time period given specified time interval length and feature\ndef plotFeatureOverTime(interval_code, feature):\n    unique_per_interval = drug_df.resample(interval_code, on = 'date', label = 'left').nunique()[feature]\n    plt.plot_date(unique_per_interval.index, unique_per_interval, ls = '-')\n    plt.xticks(rotation='vertical')\n    plt.ylim(bottom = 0)\n    plt.title(feature +' per interval (' + interval_code + ')')\n    plt.xlabel('Interval start')\n    plt.ylabel('Number of transactions')\n    plt.show()\n    \n# Plot results\nplotFeatureOverTime('2W', 'transaction_id')\nplotFeatureOverTime('M', 'vendor_name')","output":{"0":{"data":{"image/png":"9da603d3a7538a2b41180ed5bf921273f76a1769","text/plain":"<Figure size 432x288 with 1 Axes>"},"output_type":"display_data"},"1":{"data":{"image/png":"9a8ffe74d8019073dea70d164fcb8cd2260e5c09","text/plain":"<Figure size 432x288 with 1 Axes>"},"output_type":"display_data"}},"pos":4,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":6,"id":"16a384","input":"# Function to get Gini index\ndef getGini(x):\n#     Function to compute the Gini index of a sequence ordered in increasing order (technically non-decreasing order)\n    numerator_sum = 0 # initialize numerator\n    n = len(x) # number of elements in sequence\n    mu = np.mean(x) # mean of sequence\n    mu += .00000000001 # ensure not dividing by zero\n    \n    # Compute sum of numerator\n    for i, x_i in enumerate(x):\n        numerator_sum += (2*(i+1) - n - 1) * x_i\n        \n    # Divide numerator by denominator\n    G = numerator_sum / (n**2 * mu)\n    return(G)\n\n# Function to get Gini index of unordered series\ndef giniWrapper(seq):\n    ascending_vals = list(seq.sort_values())\n    return(getGini(ascending_vals))\n\n# Get cumulative sums of a list\ndef getCumSums(x):\n    return [np.sum(x[:i+1]) for i in range(len(x))]\n\n# Function to get Lorenz curves/ Gini indices for multiple drugs\ndef getDrugConcentration(drugs):\n    vendor_list = pd.unique(drug_df['vendor_name'])\n    \n    # Get revenue for each vendor\n    vendor_revenues = {drug : \\\n                       [getVendorRevenue_for_drug(vendor,drug) for vendor in vendor_list]\\\n                       for drug in drugs}\n\n    # Sort revenues in descending order (for plotting) and for ascending order (for Gini)\n    descending_revenues = {drug : sorted(vendor_revenues[drug], reverse = True) for drug in drugs}\n    \n    return(descending_revenues)\n\n    \n# Function creates Lorenz curves and computes Gini index given dictionary of descending revenues    \ndef getConcentrationStats(descending_revenues):\n    \n    # Get list of drugs (keys to descending_revenues dictionary)\n    drugs = list(descending_revenues)\n    \n    # Get ascending revenues\n    ascending_revenues = {drug : descending_revenues[drug][::-1] for drug in drugs}\n    \n    # Get cumulative sum of series (for plotting)\n    cumulative_sales = {drug : getCumSums(descending_revenues[drug]) for drug in drugs}\n    cumulative_sales_normal = {drug : cumulative_sales[drug]/cumulative_sales[drug][-1] for drug in drugs}\n    \n    # Compute Gini index for each drug\n    ginis = [getGini(ascending_revenues[drug]) for drug in drugs]","pos":10,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":8,"id":"141850","input":"def getAscendingList(x, new_length):\n#     Function takes a series and returns a list of items in the series sorted \n#     Also prepends a list of of zeros such that the total length is 'new_length'\n    return(prependZeros(list(x.sort_values()), new_length))\n\ndef prependZeros(x, new_length):\n#     Function prepends zeros to the list x to create a list of new_length\n    n_zeros = new_length - len(x)\n    zeros = [0 for _ in range(n_zeros)]\n    return(zeros + x)\n\n\n# Function takes in dataframe corresponding to one month of sales and outputs a dictionary of Gini indices for \n# each drug category\ndef getGiniFromDf(df):\n    # Get unique drugs and vendors\n    drugs = pd.unique(df.drug_prediction)\n    vendors = pd.unique(df.vendor_name)\n\n    # Group the data by drug_prediction and vendor_name\n    a = df.groupby(['drug_prediction', 'vendor_name']).USD.sum()\n    b = a.groupby(['drug_prediction']).apply(getAscendingList, new_length = len(vendors)).apply(getGini)\n    return(b)","pos":14,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":83,"id":"978104","input":"interval_length = '1W'\n\n# Group dataframe by date and drug\ndate_drug_grouper = drug_df.groupby([pd.Grouper(key = 'date', freq = interval_length), 'drug_prediction'])\n\n# Function takes in dataframe corresponding to one month of sales and outputs a dictionary of Gini indices for \n# each drug category\ndef getTop50Vendor_percent(df, thresh = .5, is_proportion = True):\n    total_revenue = df.USD.sum() # Compute total revenue for drug during specified period\n    vendor_revenues = df.groupby('vendor_name').USD.sum() # get revenue for each vendor during time period\n    vendor_revenues = vendor_revenues.sort_values(ascending = False) # sort revenues in descending order\n    cumulative_sales_prop = getCumSums(vendor_revenues) / total_revenue # get cumulative sums and divide by total\n    \n    idx = np.nonzero(cumulative_sales_prop > thresh)[0][0] # find first index of which is > thresh\n    if is_proportion:\n        return((idx + 1) / len(cumulative_sales_prop)) # get the proportion of vendors at or before this index\n    else:\n        return((idx + 1)) # get the number of vendors at or before this index\n\nres = date_drug_grouper.apply(getTop50Vendor_percent)\nres = res.unstack(level = 1)\n\n# Compute total proportion across all drugs\ntotal_res = drug_df.groupby(pd.Grouper(key = 'date', freq = interval_length)).apply(getTop50Vendor_percent)\nres['Total'] = total_res","pos":19,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":86,"id":"25ec41","input":"drugs = ['marijuana', 'cocaine', 'benzodiazepines', 'methamphetamine', 'heroin', 'ketamine','Total']\nplt.figure(figsize = (20,10))\nplt.plot(res.loc[:, drugs], lw = 5)\nplt.legend(drugs)\nplt.ylabel('Proportion of vendors accounting for 50% of sales')\nplt.xlabel('Date')\nplt.title('Proportion of vendors accounting for 50% of sales over time')\nplt.show()","output":{"0":{"data":{"image/png":"6013273fe43c2b56ce08afd4b6c785da08cf34ae","text/plain":"<Figure size 1440x720 with 1 Axes>"},"output_type":"display_data"}},"pos":20,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":9,"id":"54f3d5","input":"# Interval length to group dates by \ninterval_length = 'M'\n\n# Group reviews by date\ngrouped_by_date = drug_df.groupby(pd.Grouper(key = 'date', freq = interval_length))\n# return dictionary for each drug?\n\n# Now get list of gini indices for each drug, corresponding to each month\ndrug_ginis_over_time = grouped_by_date.apply(getGiniFromDf).groupby('drug_prediction').apply(lambda x : list(x))","pos":15,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":94,"id":"a51333","input":"drug_df.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>transaction_id</th>\n      <th>vendor_id</th>\n      <th>vendor_name</th>\n      <th>bitcoin_amt</th>\n      <th>USD</th>\n      <th>EUR</th>\n      <th>product_description</th>\n      <th>date</th>\n      <th>drug_prediction</th>\n      <th>unit_mass</th>\n      <th>unit_mass_grams</th>\n      <th>count</th>\n      <th>total_mass</th>\n      <th>price_per_gram</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>9430</th>\n      <td>'10528</td>\n      <td>590</td>\n      <td>superclr</td>\n      <td>-1.0</td>\n      <td>416.000</td>\n      <td>-1.0</td>\n      <td>5 GRAMS GRADE AAA+ CARTEL TAN POWDER HEROIN</td>\n      <td>2018-11-02 06:43:01</td>\n      <td>heroin</td>\n      <td>5 g</td>\n      <td>5.000</td>\n      <td>NaN</td>\n      <td>5.0</td>\n      <td>83.200</td>\n    </tr>\n    <tr>\n      <th>9431</th>\n      <td>'10529</td>\n      <td>590</td>\n      <td>superclr</td>\n      <td>-1.0</td>\n      <td>416.000</td>\n      <td>-1.0</td>\n      <td>5 GRAMS GRADE AAA+ CARTEL TAN POWDER HEROIN</td>\n      <td>2018-11-10 06:43:01</td>\n      <td>heroin</td>\n      <td>5 g</td>\n      <td>5.000</td>\n      <td>NaN</td>\n      <td>5.0</td>\n      <td>83.200</td>\n    </tr>\n    <tr>\n      <th>9435</th>\n      <td>'10533</td>\n      <td>92</td>\n      <td>OnionKings</td>\n      <td>-1.0</td>\n      <td>109.119</td>\n      <td>-1.0</td>\n      <td>Rivotril 2mg frÃ¥n apotek (Roche) [100st]</td>\n      <td>2018-12-21 06:43:11</td>\n      <td>benzodiazepines</td>\n      <td>2mg</td>\n      <td>0.002</td>\n      <td>100.0</td>\n      <td>0.2</td>\n      <td>545.595</td>\n    </tr>\n    <tr>\n      <th>9437</th>\n      <td>'10535</td>\n      <td>92</td>\n      <td>OnionKings</td>\n      <td>-1.0</td>\n      <td>109.119</td>\n      <td>-1.0</td>\n      <td>Rivotril 2mg frÃ¥n apotek (Roche) [100st]</td>\n      <td>2018-12-22 06:43:11</td>\n      <td>benzodiazepines</td>\n      <td>2mg</td>\n      <td>0.002</td>\n      <td>100.0</td>\n      <td>0.2</td>\n      <td>545.595</td>\n    </tr>\n    <tr>\n      <th>9439</th>\n      <td>'10537</td>\n      <td>92</td>\n      <td>OnionKings</td>\n      <td>-1.0</td>\n      <td>109.119</td>\n      <td>-1.0</td>\n      <td>Rivotril 2mg frÃ¥n apotek (Roche) [100st]</td>\n      <td>2018-12-01 06:43:11</td>\n      <td>benzodiazepines</td>\n      <td>2mg</td>\n      <td>0.002</td>\n      <td>100.0</td>\n      <td>0.2</td>\n      <td>545.595</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"     transaction_id  vendor_id vendor_name  bitcoin_amt      USD  EUR  \\\n9430         '10528        590    superclr         -1.0  416.000 -1.0   \n9431         '10529        590    superclr         -1.0  416.000 -1.0   \n9435         '10533         92  OnionKings         -1.0  109.119 -1.0   \n9437         '10535         92  OnionKings         -1.0  109.119 -1.0   \n9439         '10537         92  OnionKings         -1.0  109.119 -1.0   \n\n                              product_description                date  \\\n9430  5 GRAMS GRADE AAA+ CARTEL TAN POWDER HEROIN 2018-11-02 06:43:01   \n9431  5 GRAMS GRADE AAA+ CARTEL TAN POWDER HEROIN 2018-11-10 06:43:01   \n9435     Rivotril 2mg frÃ¥n apotek (Roche) [100st] 2018-12-21 06:43:11   \n9437     Rivotril 2mg frÃ¥n apotek (Roche) [100st] 2018-12-22 06:43:11   \n9439     Rivotril 2mg frÃ¥n apotek (Roche) [100st] 2018-12-01 06:43:11   \n\n      drug_prediction unit_mass  unit_mass_grams  count  total_mass  \\\n9430           heroin       5 g            5.000    NaN         5.0   \n9431           heroin       5 g            5.000    NaN         5.0   \n9435  benzodiazepines       2mg            0.002  100.0         0.2   \n9437  benzodiazepines       2mg            0.002  100.0         0.2   \n9439  benzodiazepines       2mg            0.002  100.0         0.2   \n\n      price_per_gram  \n9430          83.200  \n9431          83.200  \n9435         545.595  \n9437         545.595  \n9439         545.595  "},"exec_count":94,"output_type":"execute_result"}},"pos":23,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0302be","input":"## Plot the following:\n- number of vendors selling per drug for each time period\n- number of transactions per drug for each time period\n- revenue per drug for each time period","pos":5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"153ca4","input":"## Plot number of transactions/vendors over time","pos":3,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"739858","input":"Better method of computing Gini index for each drug (compare to all active vendors during given interval, rather than just the vendors sellign the given drug)","pos":13,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7dfc88","input":"## Plot relative proportion of drugs/vendors over time","pos":7,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"80aa80","input":"## Plot Gini index over time","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"92c9e4","input":"Compute Gini index for each drug over time","pos":11,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a424d7","input":"## Plot number of vendors generating 50% of revenue for each drug category\nAnother idea: Weighted Gini: multiply gini for each drug by the number of vendors in that category","pos":18,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"baff92","input":"First, get median price over time","pos":22,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"da557c","input":"## Price over time","pos":21,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e7fd68","input":"## Import data","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f5121e","input":"Plot results (including overall Gini over time)","pos":16,"state":"done","type":"cell"}
{"id":0,"time":1564608023236,"type":"user"}
{"last_load":1564603888503,"type":"file"}