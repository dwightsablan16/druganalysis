{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":81162240},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.8"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"0defab","input":"# shift the emission_prob_table (dataframe) to array format\nems_prob = np.array(emission_prob_table)[:,1:]\nems_prob = np.array(list(ems_prob[:, :]), dtype=np.float) # convert to float\nems_prob.shape","pos":60,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"39d9f6","input":"from itertools import groupby\nfrom operator import itemgetter\nfrom hmmlearn import hmm\nfrom sklearn.preprocessing import LabelEncoder","pos":62,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3de207","input":"# 测试：预测和评价\ndef testing(test_obs, test_hs, idx, verbose=True):\n    obs_seq = test_obs[idx]\n    obs_seq_ec = seq_encoded(observations, obs_seq) # encode the observed sequence\n    obs_seq_ec = obs_seq_ec.reshape((len(obs_seq_ec), 1)) # hmm2.0版需要加这行\n    # obs_seq_ec = [2, 0, 1, 1, 2, 0] # 这里需使用list而非array\n\n    # Employ Viterbi algorithm to estimate the parameters\n    vendors = hmm_Viterbi(obs_seq_ec, start_prob, trans_prob, ems_prob, len(states), n_train=5, verbose=True)\n\n    # Present the result: drugs - vendors\n    #obs_seq0 = [observations.index(obs_seq[i]) for i in range(len(obs_seq)) if obs_seq[i] in observations] # 初级编码\n    #print(\"Drugs: \\n\", \", \".join(map(lambda x: observations[x], list(obs_seq0)))) if verbose else 0\n    print(\"Vendors: \\n\", \", \".join(map(lambda x: states[x], vendors))) if verbose else 0 # 输出预测结果\n\n    # Evaluation（对预测结果进行评价-accuracy）\n    hs_seq_pred = [states[vendors[i]] for i in range(len(vendors))]\n    hs_seq_gt = test_hs[idx]\n    print(\"hs_seq_gt: \", hs_seq_gt) if verbose else 0 # 输出groundtruth\n    acc = evaluation(hs_seq_pred, hs_seq_gt, verbose=False)\n    print(\"The accuracy of sequence No.{0} is: {1} \\n\".format(idx, acc))\n\n# 测试真实数据\n# Scenario1: randomly select 20% samples from the training set.\n#test_idx = np.random.randint(0, len(d_train), int(len(d_train)*0.2))\n#test_real1 = [testing(d_train, v_train, idx) for idx in test_idx]\n\n# Scenario2: select first 20% samples from the training set.\n#test_idx = [idx for idx in range(len(d_train[: int(len(d_train)*0.2)]))]\n#test_real2 = [testing(d_train, v_train, idx) for idx in test_idx]\n\n# Scenario3: select all samples from the testing set.\ntest_real3 = [testing(d_test, v_test, idx) for idx in range(len(d_test))]\n\n# 测试合成数据\n#test_idx = np.random.randint(0, len(data_dseq), int(len(data_dseq)*0.2)) # 生成测试集的索引\n#test_synthetic = [testing(data_dseq, data_vseq, idx) for idx in test_idx] # 这里仅使用20%的数据进行测试\n","pos":67,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"463f0d","input":"# Sort by Vendor name and fill NA values with 0\nemission_prob_table = emission_prob_table.sort_values(by = ['Vendor Name'])\nemission_prob_table = emission_prob_table.fillna(0)\n\nemission_prob_table","pos":57,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"492248","input":"","pos":38,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"50a5b3","input":"vlist = np.array(emission_prob_table)[:,0]\ndlist = list(set(train_set_filtered['drug_prediction']))\nprint(len(vlist))\nprint(len(dlist))\nprint(emission_prob_table.shape)","pos":64,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"59aab8","input":"# sales_by_vendor = drug_df['vendor_name'].groupby(drug_df['vendor_name']).count()\n# sales_by_vendor.sort_values(ascending=False)\n# np.sum(sales_by_vendor)","pos":58,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5afaa3","input":"# Get list of vendors in the data frame\n_ , vendor_list = pd.factorize(train_set_filtered['vendor_name'])","pos":55,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"6a84f3","input":"import pickle\nfile = open('start_prob','wb')\npickle.dump(start_prob, file)\nfile.close()\n\nfile = open('trans_prob','wb')\npickle.dump(trans_prob, file)\nfile.close()","pos":66,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"906343","input":"# 使用Baum-Welch算法来估计参数，然后使用Viterbi算法来预测隐状态数列。\n\ndef hmm_BaumWelch(data, n_states, n_iter=100, n_train=10):\n    \"\"\"\n    @ parameters:\n        data (matrix): The encoded observed sequence of hidden state\n        n_states (int): The length of sequence for hidden state. \n        n_iter (int): The iteration of hmm.MultinomialHMM.\n        n_train (int): The training times.\n    @ return:\n        start_prob (list): Start probability with size = 1 x n_states.\n        trans_prob (matrix): Transition probability matrix with size = n_states x n_states.\n    \"\"\"\n    # Check the input format\n    if len(data) < 2 or len(data[0]) < 1:\n        return print(\"The input dataset should be 2D.\")\n    if n_states < 1 or n_iter < 1 or n_train < 1:\n        return print(\"Please input positive integer number for parameters.\")\n    # Initialize the parameters\n    score0 = float(\"-inf\")\n    start_prob = 0\n    trans_prob = 0\n    # Build the model\n    model = hmm.MultinomialHMM(n_components=n_states, n_iter=int(n_iter))\n    # Run \"n_train\" times to train the model and select the best parameters.\n    for _ in range(0, int(n_train)):\n        model.fit(data) # 模型的拟合比较耗时\n        print(\"Model fitted in round {0}!\".format(_))\n        # hmm2.0里的score函数接受2D作为输入格式\n        scores = sum([model.score([data[i]]) for i in range(len(data))]) #score越大越好（若带负号，则绝对值越小越好）\n        print(scores)\n        if scores > score0:\n            start_prob = model.startprob_\n            trans_prob = model.transmat_  \n            # 发射概率已知，这里无须估计。\n        score0 = max(score0, scores)\n    return start_prob, trans_prob\n\n# https://stackoverflow.com/questions/34379911/how-to-run-hidden-markov-models-in-python-with-hmmlearn\ndef hmm_Viterbi(obs_seq, start_prob, trans_prob, ems_prob, n_states, n_train=10, verbose=True):\n    \"\"\"\n    @ parameters:\n        obs_seq (list): An encoded observed sequence of hidden state.\n        start_prob (list): Start probability with size = 1 x n_states.\n        trans_prob (matrix): Transition probability matrix with size = n_states x n_states.\n        ems_prob (matrix): Emission probability with size = len(vlist) x len(dlist).\n        n_states (int): The length of sequence for hidden state. \n        n_train (int): The training times.\n        verbose (boolean): Print out the comment if True.\n    @ return:\n        vendor0 (list): Predicted sequence of hidden state.\n    \"\"\"\n    # Check the input format\n    if len(obs_seq) < 1:\n        return print(\"The length of observed sequence should be larger than 1.\")\n    if n_states < 1 or n_train < 1:\n        return print(\"Please input positive integer number for parameters.\")\n    if n_states != (len(trans_prob) or len(trans_prob[0])):\n        return print(\"The size of trans_prob is not correct.\")\n    if len(start_prob) != len(trans_prob):\n        return print(\"The size of start_prob and trans_prob doesn't match.\")    \n    # Build the model and initialize the parameters\n    model = hmm.MultinomialHMM(n_components=n_states)\n    model.startprob_= start_prob\n    model.transmat_ = trans_prob\n    model.emissionprob_ = ems_prob\n    logprob0 = float(\"-inf\")\n    vendor0 = 0\n    # Run \"n_train\" times to train the model and select the best parameters.\n    for _ in range(0, int(n_train)):\n        # decode: Given parameters and observed sequence, employ Viterbi algorithm to predict the hidden state.\n        logprob, vendors = model.decode(list(obs_seq), algorithm=\"viterbi\") # obs_seq must be list rather than array.\n        if logprob > logprob0: # update \"vendors\" when logprob is larger than previous one.\n            vendor0 = vendors\n        logprob0 = max(logprob0, logprob)\n    if verbose:\n        print(\"The best logprob is: \", logprob0) #该参数反映模型拟合的好坏,数值越大越好。\n    return vendor0\n\ndef seq_encoded(observations, obs_seq):\n    # 遍历观测数列，若该项在观测状态里，则返回其索引作为初级编码（加密后元素须为整数）。\n    # 获得初级编码数列后，用LabelEncoder再进行编码。\n    # ps: 通过LabelEncoder的inverse_transform函数可解码（转换回初级编码）。\n    return LabelEncoder().fit_transform([observations.index(obs_seq[i]) for i in range(len(obs_seq)) if obs_seq[i] in observations]) \n\ndef data_encoded(observations, data_dseq):\n    # 调用上述编码函数对整个观测数据集进行编码。\n    return [seq_encoded(observations, data_dseq[i]) for i in range(len(data_dseq))]\n\ndef evaluation(hs_seq_pred, hs_seq_gt, verbose=True):\n    # 评价预测结果：Compute the accuracy\n    if verbose:\n        print(\"The set of predicted hidden state sequence: \\n\", set(hs_seq_pred))\n        print(\"-\"*90)\n        print(\"The set of groundtruth hidden state sequence: \\n\", set(hs_seq_gt))\n    cnt = 0\n    for i in range(len(hs_seq_pred)):\n        if hs_seq_pred[i] == hs_seq_gt[i]:\n            cnt += 1\n    return round(cnt/len(hs_seq_pred), 4)\n","pos":63,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c6ad1a","input":"# emission_prob_table.to_csv('emission_prob_table_1.csv', index = False)","pos":59,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"cb4388","input":"# 训练HMM：给定初始参数，使用Baum-Welch算法来估计参数。\n\n# Initialize the parameters\n\"\"\"\n# parameters for quick demo:\nstates = [\"vendor 1\", \"vendor 2\", \"vendor 3\", \"vendor 4\", \"vendor 5\"]\nobservations = [\"drug1\", \"drug2\", \"drug3\"]\ndata_dseq_ec = np.array([[0,1,0,2,1,2],\n                         [0,2,1,1,0,2],\n                         [0,0,1,1,2,1]]) # three drugs: 0,1,2\nems_prob = np.array([[9.97860613e-01, 2.13881271e-03, 5.74009958e-07],\n                     [4.41131862e-05, 9.99955887e-01, 4.05913054e-34],\n                     [1.80783778e-01, 2.04285247e-01, 6.14930975e-01],\n                     [7.72785012e-06, 9.99992272e-01, 4.43047659e-40],\n                     [7.55409261e-14, 1.00000000e+00, 1.39151157e-53]])\n\"\"\"\nvlist = np.array(emission_prob_table)[:,0]\ndlist = list(set(train_set_filtered['drug_prediction']))\nstates = vlist # totally 190 vendors\nobservations = dlist # totally 15 drugs\n# encode the observed dataset\n#data_dseq_ec = data_encoded(observations, data_dseq) # synthetic\ndata_dseq_ec = data_encoded(observations, d_train) # real\ndata_dseq_ec = np.array(data_dseq_ec)\n\n# Employ Baum-Welch algorithm to estimate the parameters\nstart_prob, trans_prob = hmm_BaumWelch(data_dseq_ec, len(states), n_iter=1, n_train=1)\nprint(\"start probability ∏: \\n\", start_prob)\nprint(\"transition probability A: \\n\", trans_prob[0:20])\nprint(\"emission probability B: \\n\", ems_prob[0:20])\n\n# Save the parameters to txt file\n#output_path1 = 'vendor_frq_start_prob.txt'\n#output_path2 = 'vendor_frq_trans_prob.txt'\n#saveOutput(output_path1, start_prob)\n#saveOutput(output_path2, trans_prob)\n","pos":65,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d623c8","input":"","pos":14,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e838b4","input":"# Function gets tally of drugs sold for given vendor\ndef getDrugsForVendor(vendor_name):\n#     Args: Name of a vendor (string)\n#     Returns: series, representing proportion of total for each drug\n    vendor_subset = drug_df[drug_df['vendor_name'] == vendor_name]\n    vendor_drug_tally = vendor_subset['drug_prediction'].groupby(vendor_subset['drug_prediction']).count()\n    return(vendor_drug_tally/np.sum(vendor_drug_tally))","pos":54,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e83d26","input":"# Factorize drug_predictions\n_ , uniques = pd.factorize(train_set_filtered['drug_prediction'])","pos":53,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e95291","input":"#Create emission probability dataframe\nemission_prob_table = pd.DataFrame(columns = uniques)\n\n#Insert vendor name column\nemission_prob_table.insert(0, \"Vendor Name\", vendor_list)\n\n# Apply function to dataframe\nemission_prob_table.iloc[:,1:] = emission_prob_table['Vendor Name'].apply(getDrugsForVendor)","pos":56,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":1,"id":"e5ed5d","input":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom itertools import compress\n\nfrom datetime import datetime\nfrom dateutil.parser import parse\n\nimport math\nimport os\nimport copy\nimport pickle\n\nimport drugLookup","pos":1,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":10,"id":"e818d0","input":"# Count number of listings for each vendor and create histogram\nsales_by_vendor = drug_df['vendor_name'].groupby(drug_df['vendor_name']).count()\nplt.hist(sales_by_vendor, bins = 20)\nplt.xlabel('Number of listings')\nplt.ylabel('Number of vendors')\nplt.show()\n","output":{"0":{"data":{"image/png":"bb21f18a494c32bc836cf00be92591557b1d4524","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":10,"metadata":{"image/png":{"height":263,"width":397}},"output_type":"execute_result"}},"pos":19,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":11,"id":"0127ad","input":"# Plot drug categories by popularity\ndrug_counts = drug_df['drug_prediction'].groupby(drug_df['drug_prediction']).count().sort_values(ascending = False)\ndrug_percents = round(100 * drug_counts/np.sum(drug_counts),2)\n\n# For each drug, get percentage of the whole\nprint(drug_percents)\n\n# Plot results\ndrug_counts.plot(kind = 'bar')\nplt.ylabel('frequency')\nplt.title('drug frequencies')\nplt.show()","output":{"0":{"name":"stdout","output_type":"stream","text":"drug_prediction\nmarijuana                19.97\ncocaine                  16.11\nbenzodiazepines          12.95\nmethamphetamine           7.28\nhashish                   6.07\nstimulant                 5.75\nlsd                       5.05\nketamine                  3.80\necstasy                   3.12\noxycodone                 2.81\nopioid                    2.49\nopioid_treatment          2.42\ndmt                       2.24\npsilocybin                1.79\nprescription              1.75\nsteroids_and_hormones     1.62\nerectile_dysfunction      1.53\nheroin                    1.29\npsychedelic               1.05\ninhalants                 0.79\nantidepressant            0.07\ndissociative              0.02\nkratom                    0.01\nName: drug_prediction, dtype: float64\n"},"1":{"data":{"image/png":"7a29258155de542f60be5fa02785a9742207191a","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":11,"metadata":{"image/png":{"height":387,"width":403}},"output_type":"execute_result"}},"pos":16,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":11,"id":"73afaf","input":"# Sort vendors by number of sales\nsorted_sales_by_vendor = sales_by_vendor.sort_values(ascending = False)\nat_least_100_sales = np.where(sorted_sales_by_vendor == 100)[0][-1]\nat_least_50_sales = np.where(sorted_sales_by_vendor == 50)[0][-1]\nat_least_20_sales = np.where(sorted_sales_by_vendor == 20)[0][-1]","pos":20,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":12,"id":"1e0b85","input":"# Function checks if item is in the set\ndef isInSet(item, myset):\n    return(item in myset)\n\n# Get percentages for each drug\nhi_freq_drugs = drug_percents[drug_percents > 1].index # Get names of drugs\n\n# Check if row is high-frequency drug\nis_hi_freq_row = drug_df['drug_prediction'].apply(isInSet, myset = hi_freq_drugs)\ndrug_df = drug_df[is_hi_freq_row]\n\n# Show percentage of each drug after filtering\ndrug_counts2 = drug_df['drug_prediction'].groupby(drug_df['drug_prediction']).count().sort_values(ascending = False)\n100*drug_counts2/np.sum(drug_counts2)","output":{"0":{"data":{"text/plain":"drug_prediction\nmarijuana                20.149814\ncocaine                  16.257589\nbenzodiazepines          13.062210\nmethamphetamine           7.342189\nhashish                   6.128011\nstimulant                 5.806515\nlsd                       5.099876\nketamine                  3.833475\necstasy                   3.152947\noxycodone                 2.837979\nopioid                    2.513219\nopioid_treatment          2.443045\ndmt                       2.255369\npsilocybin                1.809844\nprescription              1.765781\nsteroids_and_hormones     1.638488\nerectile_dysfunction      1.542202\nheroin                    1.303936\npsychedelic               1.057510\nName: drug_prediction, dtype: float64"},"exec_count":12,"output_type":"execute_result"}},"pos":17,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":12,"id":"4aa165","input":"# Get cumulative sum of series\ncumulative_sales = [np.sum(sorted_sales_by_vendor[:i]) for i in range(len(sorted_sales_by_vendor))]","pos":21,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":13,"id":"b04474","input":"# Plot number of vendors vs. number of listings\nplt.plot(cumulative_sales)\nplt.axvline(x=at_least_100_sales, color = 'r',linestyle = ':', label = 'At least 100 sales')\nplt.axvline(x=at_least_50_sales, color = 'g',linestyle = ':', label = 'At least 50 sales')\nplt.axvline(x=at_least_20_sales, color = 'k',linestyle = ':', label = 'At least 20 sales')\nplt.xlabel('Vendor # (descending order of sales)')\nplt.ylabel('Cumulative listings')\nplt.title('Distribution of sales by vendors')\nplt.legend()\nplt.show()","output":{"0":{"data":{"image/png":"2a73544138a390841f9970d865036f86723a87c5","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":13,"metadata":{"image/png":{"height":277,"width":410}},"output_type":"execute_result"}},"pos":22,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":14,"id":"350a1a","input":"# Get list of vendors in dataframe\n_ , vendor_list = pd.factorize(drug_df['vendor_name'])\n\n# Function to count number of drugs per vendor\ndef countDrugsForVendor(vendor_name):\n    return(len(drug_df[drug_df['vendor_name'] == vendor_name].groupby('drug_prediction').count().index))\n\n# Get number of drugs sold for each vendor\nvendor_drug_counts = {vendor : countDrugsForVendor(vendor) for vendor in vendor_list}","pos":31,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":15,"id":"563dbf","input":"# Count number of listings for each vendor and create histogram\nsales_by_vendor = drug_df['vendor_name'].groupby(drug_df['vendor_name']).count() #changed from drug_df to alldrugs\nplt.hist(sales_by_vendor, bins = 20)\nplt.xlabel('Number of listings')\nplt.ylabel('Number of vendors')\nplt.title('Listings per vendor')\nplt.show()\n\nprint('Mean  :', round(np.mean(sales_by_vendor),1))\nprint('Median:', round(np.median(sales_by_vendor),1))\nprint('Max   :', round(np.max(sales_by_vendor),1))\nprint('Min   :', round(np.min(sales_by_vendor),1))","output":{"0":{"data":{"image/png":"823cd356c591308e666d11f8bba5e2dd429d2add","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":15,"metadata":{"image/png":{"height":277,"width":397}},"output_type":"execute_result"},"1":{"name":"stdout","output_type":"stream","text":"Mean  : 39.8\nMedian: 12.0\nMax   : 900\nMin   : 1\n"}},"pos":33,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":16,"id":"fbc736","input":"print('Mean  :', round(np.mean(list(vendor_drug_counts.values())),1))\nprint('Median:', round(np.median(list(vendor_drug_counts.values())),1))\nprint('Max   :', round(np.max(list(vendor_drug_counts.values())),1))\nprint('Min   :', round(np.min(list(vendor_drug_counts.values())),1))\n\n# Make histogram of vendor_drug_counts\n#bins = range(1,max(vendor_drug_counts.values()))\n#plt.hist(vendor_drug_counts.values(), bins = bins)\n#plt.xlabel('Number of drug categories')\n#plt.ylabel('Number of vendors')\n#plt.title('Categories per vendor')\n#plt.show()","output":{"0":{"name":"stdout","output_type":"stream","text":"Mean  : 1.4\nMedian: 1.0\nMax   : 13\nMin   : 1\n"}},"pos":34,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":17,"id":"593987","input":"# Threshold out vendors with less than given threshold of listings\nthresh = 100\nhi_freq_vendors = sales_by_vendor[sales_by_vendor > thresh]\nprint('Vendors before thresholding:', len(sales_by_vendor))\nprint('Vendors after thresholding:', len(hi_freq_vendors))","output":{"0":{"name":"stdout","output_type":"stream","text":"Vendors before thresholding: 1509\nVendors after thresholding: 167\n"}},"pos":24,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":17,"id":"f38f97","input":"# Show percentage of each drug after filtering\ndrug_counts = drug_df['drug_prediction'].groupby(drug_df['drug_prediction']).count().sort_values(ascending = False)\n100*drug_counts/np.sum(drug_counts)\n\n# Plot results\ndrug_counts.plot(kind = 'bar')\nplt.ylabel('frequency')\nplt.title('drug frequencies')\nplt.show()","output":{"0":{"data":{"image/png":"7a47fb5b8e2bf7a470cafa6230af7a86b082f392","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":17,"metadata":{"image/png":{"height":387,"width":403}},"output_type":"execute_result"}},"pos":35,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":18,"id":"891323","input":"# Print distribution of listings over time\ndrug_df['date'].groupby(drug_df[\"date\"].dt.month).count().plot(kind='bar')\nplt.title('Monthly frequencies')\nplt.ylabel('Number of Listings')\nplt.xlabel('Month')\nplt.show()\n\nmonthly_listings = drug_df['date'].groupby(drug_df[\"date\"].dt.month).count()\ntotal_listings = sum(drug_df['date'].groupby(drug_df[\"date\"].dt.month).count())\n\nprint(monthly_listings)\ntotal_listings","output":{"0":{"data":{"image/png":"eb19eeeb19c8ba87be32137354dcac81ddcbadfc","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":18,"metadata":{"image/png":{"height":280,"width":403}},"output_type":"execute_result"},"1":{"name":"stdout","output_type":"stream","text":"date\n1      8603\n4      2465\n5      4805\n6      4955\n7      5776\n8      9772\n9     11078\n10    14993\n11    18416\n12    26831\nName: date, dtype: int64\n"},"2":{"data":{"text/plain":"107694"},"exec_count":18,"output_type":"execute_result"}},"pos":36,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":18,"id":"b16682","input":"#Calculate the ratio of listings for vendors > threshold\npercentage_of_listings = np.sum(hi_freq_vendors)/np.sum(sales_by_vendor)\npercent_of_vendors = len(hi_freq_vendors)/len(sales_by_vendor)\nprint('Percent of listings:',percentage_of_listings)\nprint('Percent of vendors :',percent_of_vendors)","output":{"0":{"name":"stdout","output_type":"stream","text":"Percent of listings: 0.4790782688165024\nPercent of vendors : 0.11066931742876077\n"}},"pos":25,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":19,"id":"7bfcc1","input":"# Mean number of drugs per vendor\navg_sales = sum(sales_by_vendor)/len(hi_freq_vendors)\navg_sales","output":{"0":{"data":{"text/plain":"366.92215568862275"},"exec_count":19,"output_type":"execute_result"}},"pos":26,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":2,"id":"bf8e50","input":"# Read in data (from pickle file)\nfile = open('drug_data','rb')\ndrug_data = pickle.load(file)","pos":2,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":20,"id":"909118","input":"# Function checks if item is in the set\ndef isInSet(item, myset):\n    return(item in myset)\n\nhi_freq_vendor_names = list(hi_freq_vendors.index)\n\n# For every row, check if the vendor is in high-frequency set\nis_hi_freq_row = drug_df['vendor_name'].apply(isInSet, myset = hi_freq_vendors.index)\n\n# Get dataframe with just the high-frequency set\ndrug_df = drug_df[is_hi_freq_row]","pos":27,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":27,"id":"e93a9b","input":"# Sort data by date\ndrug_df_sorted = drug_df.sort_values(by = 'date')\n# drug_df_sorted = drug_df_sorted[drug_df_sorted['date'] > datetime(2018,10,1)]\n\n# Get total number of samples, and number of train/test samples\nn_samples = drug_df_sorted.shape[0]\nn_train = round(n_samples * .75)\n\n# Create training/test set\ntrain_set = drug_df_sorted.iloc[:n_train,[2,4,6,7]]\ntest_set = drug_df_sorted.iloc[n_train:,[2,4,6,7]]\n\nprint('Total number of samples', n_samples)\nprint('Train samples          ', n_train)\nprint('Test samples            ', n_samples - n_train)","output":{"0":{"name":"stdout","output_type":"stream","text":"Total number of samples 29356\nTrain samples           22017\nTest samples             7339\n"}},"pos":40,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":28,"id":"39bb69","input":"# Remove all samples from train set which are not in the test set\n_ , train_vendors = pd.factorize(train_set['vendor_name'])\n_ , test_vendors = pd.factorize(test_set['vendor_name'])","pos":41,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":29,"id":"32273a","input":"# Get intersection of train and test vendors\n# Only include these in the dataset\nvendors_in_both = train_vendors.intersection(test_vendors)\nprint(set(train_vendors).symmetric_difference(set(test_vendors)))\nprint(set(test_vendors).symmetric_difference(set(train_vendors)))\nprint('airforceone' in train_vendors)\nprint('airforceone' in test_vendors)\nprint(len(train_vendors))\nprint(len(test_vendors))","output":{"0":{"name":"stdout","output_type":"stream","text":"set()\nset()\nFalse\nFalse\n167\n167\n"}},"pos":42,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"c0a5f9","input":"def isDrug(categoryList):\n    return('not_drugs' not in categoryList)\nrow_is_drug = drug_data['drug_prediction'].apply(isDrug)\ndrug_data = drug_data[row_is_drug]","pos":4,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":30,"id":"5fa35d","input":"# Take out airforceone from training and test set \ntrain_set_filtered = train_set[train_set['vendor_name'] != 'airforceone']\ntest_set_filtered = test_set[test_set['vendor_name'] != 'airforceone']","pos":43,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":31,"id":"f873a5","input":"import pickle\nfile = open('train_set','wb')\npickle.dump(train_set, file)\nfile.close()\n\nfile = open('test_set','wb')\npickle.dump(test_set, file)\nfile.close()","pos":44,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":32,"id":"952ce5","input":"import pickle\nfile = open('train_set_filtered','wb')\npickle.dump(train_set_filtered, file)\nfile.close()\n\nfile = open('test_set_filtered','wb')\npickle.dump(test_set_filtered, file)\nfile.close()","pos":45,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":33,"id":"653bd5","input":"# Check that there are no vendors who are not in both training and testing sets\n_ , train_vendors_filtered = pd.factorize(train_set_filtered['vendor_name'])\n_ , test_vendors_filtered = pd.factorize(test_set_filtered['vendor_name'])\n\nprint(set(train_vendors_filtered).symmetric_difference(set(test_vendors_filtered)))\nprint(set(test_vendors_filtered).symmetric_difference(set(train_vendors_filtered)))\nprint('airforceone' in train_vendors_filtered)\nprint('airforceone' in test_vendors_filtered)\nprint(len(train_vendors_filtered))\nprint(len(test_vendors_filtered))","output":{"0":{"name":"stdout","output_type":"stream","text":"set()\nset()\nFalse\nFalse\n167\n167\n"}},"pos":46,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":34,"id":"7d0d6d","input":"test_set_filtered.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>vendor_name</th>\n      <th>USD</th>\n      <th>date</th>\n      <th>drug_prediction</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>29356</th>\n      <td>Perfect.Shrooms</td>\n      <td>13.16</td>\n      <td>2018-11-30 21:39:57</td>\n      <td>psilocybin</td>\n    </tr>\n    <tr>\n      <th>72443</th>\n      <td>xanastan</td>\n      <td>93.59</td>\n      <td>2018-11-30 21:47:53</td>\n      <td>benzodiazepines</td>\n    </tr>\n    <tr>\n      <th>53104</th>\n      <td>paloheina</td>\n      <td>99.27</td>\n      <td>2018-11-30 21:57:59</td>\n      <td>marijuana</td>\n    </tr>\n    <tr>\n      <th>13589</th>\n      <td>Smokey1884</td>\n      <td>104.93</td>\n      <td>2018-11-30 22:06:48</td>\n      <td>marijuana</td>\n    </tr>\n    <tr>\n      <th>13598</th>\n      <td>Smokey1884</td>\n      <td>104.93</td>\n      <td>2018-11-30 22:06:48</td>\n      <td>marijuana</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"           vendor_name     USD                date  drug_prediction\n29356  Perfect.Shrooms   13.16 2018-11-30 21:39:57       psilocybin\n72443         xanastan   93.59 2018-11-30 21:47:53  benzodiazepines\n53104        paloheina   99.27 2018-11-30 21:57:59        marijuana\n13589       Smokey1884  104.93 2018-11-30 22:06:48        marijuana\n13598       Smokey1884  104.93 2018-11-30 22:06:48        marijuana"},"exec_count":34,"output_type":"execute_result"}},"pos":47,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":35,"id":"e506f0","input":"a = [1,2,3,4,5]\na[-4:]","output":{"0":{"data":{"text/plain":"[2, 3, 4, 5]"},"exec_count":35,"output_type":"execute_result"}},"pos":48,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":36,"id":"6c2537","input":"def dataset_reshape(dataset, rows, cols):\n    # 按顺序截取部分数据，然后重塑形状。\n    dataset_ = dataset[0 : int(rows*cols)]\n    return dataset_.reshape((rows, cols))\n\nn_train = 5\nn_test = 1\nlen_seq = 100\n\n\nv_train = np.array(train_set_filtered['vendor_name'][-n_train*len_seq:])\nd_train = np.array(train_set_filtered['drug_prediction'][-n_train*len_seq:])\nv_test = np.array(test_set_filtered['vendor_name'][:n_test*len_seq])\nd_test = np.array(test_set_filtered['drug_prediction'][:n_test*len_seq])\n\n# Reshape for model\nv_train = v_train.reshape((n_train,len_seq))\nd_train = d_train.reshape((n_train,len_seq))\nv_test = v_test.reshape((n_test,len_seq))\nd_test = d_test.reshape((n_test,len_seq))\n","pos":49,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":37,"id":"04fc76","input":"print(v_train.shape,\\\nd_train.shape,\\\nv_test.shape,\\\nd_test.shape)","output":{"0":{"name":"stdout","output_type":"stream","text":"(5, 100) (5, 100) (1, 100) (1, 100)\n"}},"pos":50,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":38,"id":"38122a","input":"# 将数据集分割为训练集和测试集\ndef dataset_split(dataset):\n    # Input dataset and split it into training set and testing set.\n    # 分割方法：将test_date里月份的样本放进测试集，其余放进训练集。\n    # input format: 35606 x 3\n    # 201812~201901的交易量为7585，占比27%；\n    test_date = ['2018-12', '2019-01']\n    v_train, v_test = [], []\n    d_train, d_test = [], []\n    for i in range(len(dataset)):\n        if dataset[i][0] in test_date:\n            d_test.append(dataset[i][1])\n            v_test.append(dataset[i][2])\n        else:\n            d_train.append(dataset[i][1])\n            v_train.append(dataset[i][2])\n    return np.array(v_train), np.array(v_test), np.array(d_train), np.array(d_test)\n\ndef dataset_reshape(dataset, rows, cols):\n    # 按顺序截取部分数据，然后重塑形状。\n    dataset_ = dataset[0 : int(rows*cols)]\n    return dataset_.reshape((rows, cols))\n\n\nif __name__ == '__main__':\n    # 参数初始化\n    n_train = 280\n    n_test = 75\n    len_seq = 100\n\n    # 分割数据集\n    v_train_, v_test_, d_train_, d_test_ = dataset_split(data_DDV)\n    # len(train) = 28021; len(test) = 7585\n\n    # 重塑形状（v_train, d_train, v_test, d_test）\n    v_train = dataset_reshape(v_train_, n_train, len_seq) # size = n_train x len_seq\n    d_train = dataset_reshape(d_train_, n_train, len_seq)\n    v_test = dataset_reshape(v_test_, n_test, len_seq) # size = n_test x len_seq\n    d_test = dataset_reshape(d_test_, n_test, len_seq)\n","output":{"0":{"ename":"NameError","evalue":"name 'data_DDV' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-38-b8bc24cdfab1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m     \u001b[0;31m# 分割数据集\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m     \u001b[0mv_train_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv_test_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0md_train_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0md_test_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdataset_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_DDV\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m     \u001b[0;31m# len(train) = 28021; len(test) = 7585\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'data_DDV' is not defined"]}},"pos":51,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"538a30","input":"drug_data.shape","output":{"0":{"data":{"text/plain":"(79335, 12)"},"exec_count":4,"output_type":"execute_result"}},"pos":5,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":5,"id":"afbb26","input":"# Count categories for each listing\nprint('Count number of labels for each listing:')\nprint(drug_data['drug_prediction'].apply(len).groupby(drug_data['drug_prediction'].apply(len)).count())","output":{"0":{"name":"stdout","output_type":"stream","text":"Count number of labels for each listing:\ndrug_prediction\n0     2056\n1    77279\nName: drug_prediction, dtype: int64\n"}},"pos":8,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":5,"id":"ddeab9","input":"drug_data","output":{"0":{"more_output":true}},"pos":6,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":6,"id":"4d5a4b","input":"# Get listings with fewer than 1 category\ncond1 = drug_data['drug_prediction'].apply(len) < 2\ncond2 = drug_data['drug_prediction'].apply(len) > 0\ndrug_df = copy.deepcopy(drug_data[cond1 & cond2])\n\n# Get first string in one element list of strings\n# Input: list of strings\ndef getFirst(mylist):\n    return(mylist[0])\ndrug_df['drug_prediction'] = drug_df['drug_prediction'].apply(getFirst)","pos":9,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":7,"id":"701a4a","input":"#Save drug_df dataframe to use in time stats\nimport pickle\nfile=open('drug_df' , 'wb')\npickle.dump(drug_df, file)\nfile.close()","pos":37,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":7,"id":"b24e66","input":"# Count number of listings for each vendor and create histogram\nsales_by_vendor = drug_df['vendor_name'].groupby(drug_df['vendor_name']).count()\nplt.hist(sales_by_vendor, bins = 20)\nplt.xlabel('Number of listings')\nplt.ylabel('Number of vendors')\nplt.title('Listings per vendor')\nplt.show()","output":{"0":{"data":{"image/png":"823cd356c591308e666d11f8bba5e2dd429d2add","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":7,"metadata":{"image/png":{"height":277,"width":397}},"output_type":"execute_result"}},"pos":11,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":8,"id":"7bd82b","input":"# Get list of vendors in dataframe\n_ , vendor_list = pd.factorize(drug_df['vendor_name'])\n\n# Function to count number of drugs per vendor\ndef countDrugsForVendor(vendor_name):\n    return(len(drug_df[drug_df['vendor_name'] == vendor_name].groupby('drug_prediction').count().index))\n\n# Get number of drugs sold for each vendor\nvendor_drug_counts = {vendor : countDrugsForVendor(vendor) for vendor in vendor_list}\n\n# Make histogram of vendor_drug_counts\n#bins = range(1,max(vendor_drug_counts.values()))\n#plt.hist(vendor_drug_counts.values(), bins = bins)\n#plt.xlabel('Number of drug categories')\n#plt.ylabel('Number of vendors')\n#plt.title('Categories per vendor')\n#plt.show()","pos":12,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":9,"id":"6f1d39","input":"# Show percentage of each drug after filtering\ndrug_counts = drug_df['drug_prediction'].groupby(drug_df['drug_prediction']).count().sort_values(ascending = False)\n100*drug_counts/np.sum(drug_counts)\n\n# Plot results\ndrug_counts.plot(kind = 'bar')\nplt.ylabel('frequency')\nplt.title('drug frequencies')\nplt.show()","output":{"0":{"data":{"image/png":"7a47fb5b8e2bf7a470cafa6230af7a86b082f392","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":9,"metadata":{"image/png":{"height":387,"width":403}},"output_type":"execute_result"}},"pos":13,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0d0f9c","input":"# Emission Probability Table","pos":52,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"10d0d0","input":"## Rebuild dataset for HMM model","pos":39,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"124d8c","input":"Plot number of drugs sold per vendor (histogram)","pos":30,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"12f29f","input":"# Count categories per vendor","pos":29,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"198b00","input":"## Build HMM models to estimate parameters and predict hidden state","pos":61,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"1cb01d","input":"# Summary statistics (after filtering)","pos":32,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"411420","input":"# Thresholding out low-frequency vendors","pos":23,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7b2675","input":"# Reading in file and converting timestamps","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8a3378","input":"# Filter out low frequency drugs","pos":15,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8fbed7","input":"# Summary statistics (before filtering)","pos":10,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"98cd54","input":"Now analyze distribution for thresholded dataframe","pos":28,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a6332d","input":"# Distribution of sales among vendors","pos":18,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b89eaf","input":"# Get listings with only one category","pos":7,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"dcdf7c","input":"# Remove not_drugs","pos":3,"state":"done","type":"cell"}
{"id":0,"time":1565196818885,"type":"user"}
{"last_load":1565196814961,"type":"file"}